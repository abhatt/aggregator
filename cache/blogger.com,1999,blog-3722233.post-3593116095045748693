<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-3722233.post-3593116095045748693</id><link href="https://blog.computationalcomplexity.org/2018/10/if-pnp-then-we-have-alg-for-sat.html" rel="alternate" type="text/html"/><title>If P=NP then we HAVE an alg for SAT.</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I am writing up the result of my survey of peoples opinion of P vs NP (it will be in a SIGACT News, in Lane's Complexity Column, in 2019.) Some  people wrote:<br/>
<br/>
                         <i> P=NP but the proof will be nonconstructive and have a large constant.</i><br/>
<br/>
Large constant could happen.<br/>
<br/>
If by nonconstructive they mean not practical, then yes, that could happen.<br/>
<br/>
The following does not quite show it can't happen but it does give one pause:  an old result of Levin's shows that there is a program you could write NOW such that if P=NP then this program decides SAT <b>except for a finite number of formulas</b> (all of which are NOT in SAT) and can be proven to work in poly time (I will later give three pointers to proofs). The <b>finite number of formulas </b>is why the people above may still be right. But only a finite number- seems like a weak kind of nonconstructive.<br/>
<br/>
Since I am teaching crypto I wondered about Factoring. An old result of Gasarch (I proved it this morning -- I am sure it is already known) shows that there is a program you could write NOW such that if Factoring is in P then this program factors a number ALWAYS (none of this <b>finite exception</b> crap) and can be proven to work in poly time. Even so, the algorithm is insane. If someone thought that factoring in P might be nonconstructive, my construction disproves it in such an absurd  way that  the notion that factoring could be in P nonconstructively should be taken seriously but not literally. There should be a way to say formally:<br/>
<br/>
<i>I believe that FACTORING is in P but  any poly-time algorithm is insane (not even looking at the constants) and hence could never be implemented.</i><br/>
<br/>
<br/>
Not sure how to define insane.<br/>
<br/>
Three pointers:<br/>
<br/>
Stack Exchange TCS:  <a href="https://cstheory.stackexchange.com/questions/41751/algorithm-whose-running-time-depends-on-p-vs-np">here</a><br/>
<br/>
Wikipedia: <a href="https://en.wikipedia.org/wiki/P_versus_NP_problem#Polynomial-time_algorithms">here</a><br/>
<br/>
My slides (also include factoring result): <a href="https://www.cs.umd.edu/users/gasarch/BLOGPAPERS/pnpconst.pdf">here</a><br/>
<br/>
<b>Question: </b>Can the SAT result be improved to be an algorithm that is ALWAYS right? Is there a way to show that it can't be (unless, say P=NP).<br/>
<br/>
<b>Question</b>: What can be said about Graph Isomphism in this context? The proof for SAT is easily adpated to this case (all we used about SAT was that it was self-reducible). But can we get our GI algorithm to never make a mistake?<br/>
<b><br/></b></div><div class="commentbar"><p/></div></summary><updated planet:format="October 29, 2018 04:08 AM">2018-10-29T04:08:00Z</updated><published planet:format="October 29, 2018 04:08 AM">2018-10-29T04:08:00Z</published><author><name>GASARCH</name><email>noreply@blogger.com</email></author><source><id>tag:blogger.com,1999:blog-3722233</id><category term="typecast"/><category term="focs metacomments"/><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/><link href="https://blog.computationalcomplexity.org/feeds/posts/default?alt=rss" rel="self" type="application/atom+xml"/><subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle><title>Computational Complexity</title><updated planet:format="December 17, 2018 01:56 AM">2018-12-17T01:56:56Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;3c48828af0b9b548c409eba7b894fc342a0679ccd23a3f1db96c1212435d64c9&quot;</planet:http_etag><planet:http_last_modified>Sun, 16 Dec 2018 21:24:54 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>computational-complexity</planet:css-id><planet:face>gasarch.png</planet:face><planet:name>Computational Complexity</planet:name><planet:http_status>200</planet:http_status></source></entry>
