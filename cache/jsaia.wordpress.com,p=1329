<?xml version="1.0" encoding="utf-8"?><entry xml:lang="en" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://jsaia.wordpress.com/?p=1329</id><link href="https://jsaia.wordpress.com/2015/04/20/the-coolest-problem-youve-never-heard-of/" rel="alternate" type="text/html"/><title>The Coolest Problem You’ve Never Heard Of</title><summary>How do you compute over a noisy channel?   Say Alice and Bob want to run a distributed algorithm, but they can only communicate over a channel where each bit is flipped either stochastically or adversarially.  What is the smallest number of bits they must send in order to obtain the correct output of the algorithm, with high probability?  This […]<div class="commentbar"><p/></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>How do you compute over a noisy channel?   Say Alice and Bob want to run a distributed algorithm, but they can only communicate over a channel where each bit is flipped either stochastically or adversarially.  What is the smallest number of bits they must send in order to obtain the correct output of the algorithm, with high probability?  This general problem is called Interactive Communication, or sometimes Interactive Coding/Computation – let’s use IC for short.  It doesn’t take much imagination to think of applications of IC:  enabling sensor nodes to compute a function on their inputs in a noisy environment; designing reliable algorithms for natural algorithms [1]; and designing attack-resistant algorithms [2], just as some examples.</p>
<p>Wait, you may be thinking, isn’t this problem solved by error correcting codes?  No – the bits sent in the distributed algorithm may be determined only one at a time, in a dynamic manner.  Even for stochastic noise, if we naively encode each bit sent, in order to get a union bound ensuring the probability of any decoding error is small, we’ll need logarithmic blowup for each bit.  We can do better.</p>
<p>In fact, in the first paper on this problem, <a href="http://users.cms.caltech.edu/~schulman/Papers/intercoding.pdf">Coding for Interactive Communication</a>, Leonard Schulman described an algorithm that requires only constant blowup, even when a constant fraction of the bits on the channel are flipped <strong>adversarially</strong>.  Schulman’s algorithm was based on a new type of code, tree codes, designed specifically for interactive communication. After this paper was published in 1996, subsequent work  focused on improving the error tolerance of Schulman’s algorithm (i.e. tolerating a larger constant fraction of errors); tuning the communication blowup to the (known) error rate; and considering the situation where the computation occurs over more than 2 parties.  See the survey paper <a href="http://www.cs.princeton.edu/~mbraverm/pmwiki/uploads/Interactive-Allerton12-Braverman.pdf">Coding for interactive computation: progress and challenges</a> (especially Sections 3 and 4) for details.</p>
<p>I’ll note here that in a sense all of information theory can be though of as a subset of IC. In particular, information theory considers “only” the class of distributed algorithms where Alice has an input that she wants to send to Bob.  In IC, we need to handle all possible distributed  algorithms, and so in a way, it’s pretty amazing that a constant adversarial noise rate can even be tolerated.</p>
<p>A very recent breakthrough in IC occurred in FOCS 2014, where Bernhard Haeupler in the paper <a href="http://arxiv.org/abs/1408.1467">Interactive Channel Capacity Revisited</a>, made huge progress on the problem of tuning the communication blowup to a known error rate.  In particular, he described an algorithm that given a fixed and known adversarial noise rate \epsilon, achieves a communication blowup as a function of \epsilon that is conjectured to be optimal.</p>
<p>So what if \epsilon is not known in advance?  I’m going to end this post with a short advertisement for a recent paper with some collaborators of mine that begins to address that problem.  The paper is <a href="http://www.cs.unm.edu/~saia/papers/IC-unknown-rate.pdf">Interactive Communication with Unknown Noise Rate</a>, with Varsha Dani, Mahnush Movahedi, and Maxwell Young that will be in this upcoming <a href="http://www.kurims.kyoto-u.ac.jp/icalp2015/">ICALP</a>.  This is the first paper I’ve written about IC, and I hope it won’t be the last.  In fact, I’d like to see more people in the distributed computing community consider the problem.  In particular, it’d be nice to make progress on the (currently very hard) problem of somehow generalizing results to more than 2 parties.</p>
<p>[1]  For example, see this paper for a closely related problem: <a href="http://arxiv.org/abs/1311.3425">Breathe before Speaking: Efficient Information Dissemination Despite Noisy, Limited and Anonymous Communication</a></p>
<p>[2] This last domain is particularly interesting to me.  An obvious connection is attacks on communication channels.  A less-obvious connection is attacks on nodes.  If communication from each node is bounded, as is increasingly common for algorithms on large networks, there may be a fairly tight connection between attacks on communication channels and attacks on nodes.  Thus, there may be connections to attacks like Byzantine faults.</p></div></content><updated planet:format="April 20, 2015 06:32 PM">2015-04-20T18:32:50Z</updated><published planet:format="April 20, 2015 06:32 PM">2015-04-20T18:32:50Z</published><category term="Uncategorized"/><category term="distributed computing"/><category term="interactive computation"/><category term="reliability"/><category term="theory"/><author><name>Jared</name></author><source><id>https://jsaia.wordpress.com</id><logo>https://s0.wp.com/i/buttonw-com.png</logo><link href="https://jsaia.wordpress.com/feed/" rel="self" type="application/atom+xml"/><link href="https://jsaia.wordpress.com" rel="alternate" type="text/html"/><link href="https://jsaia.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/><link href="https://jsaia.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/><subtitle>Distributed Algorithms and Security</subtitle><title>Machinations</title><updated planet:format="December 17, 2018 05:29 AM">2018-12-17T05:29:31Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_last_modified>Mon, 03 Sep 2018 10:34:51 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>jared-saia</planet:css-id><planet:face>saia.png</planet:face><planet:name>Jared Saia</planet:name><planet:filters>category.py?cats=theory</planet:filters><planet:http_location>https://jsaia.wordpress.com/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>

