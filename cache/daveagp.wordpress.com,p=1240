<?xml version="1.0" encoding="utf-8"?><entry xml:lang="en" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://daveagp.wordpress.com/?p=1240</id><link href="https://daveagp.wordpress.com/2012/06/03/diagrams/" rel="alternate" type="text/html"/><title>Diagrams</title><summary>The diagram above is from a paper of mine which, as I found out today, was published last year! It is in ACM Transactions on Algorithms, although their website still lists the “current issue” as 2010 and they didn’t tell me when it went to press. The paper, joint with Ramki Thurimella, is about using a […]<div class="commentbar"><p/></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://daveagp.files.wordpress.com/2012/06/cactus.png"><img alt="" class="aligncenter size-full wp-image-1241" src="https://daveagp.files.wordpress.com/2012/06/cactus.png?w=500" title="cactus"/></a></p>
<p>The diagram above is from a <a href="http://dave-pritchard.net/research/">paper</a> of mine which, as I found out today, was published last year! It is in ACM Transactions on Algorithms, although their <a href="http://talg.acm.org/">website</a> still lists the “current issue” as 2010 and they didn’t tell me when it went to press. The paper, joint with Ramki Thurimella, is about using a simple idea from graph theory to obtain dramatic speedups for distributed algorithms. An <em>Eulerian</em> subgraph is one with even degree at every node. The <em>cycle space</em> is the family of all Eulerian subgraphs; it is a vector space because when you add two Eulerian subgraphs mod 2, the result is another Eulerian subgraph. We show that you can efficiently sample a random Eulerian subgraph and use the samples to quickly determine if the graph is 3-edge-connected, or 2-vertex-connected. The picture above, which is a bunch of pure graph theory, is used in the implementation for the parallel model of computing.</p>
<p>Here is a second picture:</p>
<p><a href="https://daveagp.files.wordpress.com/2012/06/gpolys.png"><img alt="" class="aligncenter size-full wp-image-1245" src="https://daveagp.files.wordpress.com/2012/06/gpolys.png?w=500" title="gpolys"/></a></p>
<p>This one is from <a href="http://www.cs.elte.hu/egres/www/tr-12-03.html">ongoing work</a> with several collaborators from the Egerváry Research Group in Budapest. It shows a g-polymatroid on the left; if we relax the blue constraint we get the polyhedron on the right which is not a g-polymatroid. This picture was much harder for me to put together! I had drawn these polyhedra originally using Maple and/or Sage, which are great for doing anything polyhedral (even in more than 3 dimensions). But exporting to a .pdf-friendly format was next to impossible! What I have finally settled on is the <a href="http://www.ctan.org/pkg/pst-solides3d">pst-solides3d</a> package for LaTeX, which is pretty professional and gives you very good control over the appearance.</p>
<p>I also considered using Asmpytote with the media9 package, which lets you actually rotate the 3d diagrams while you are reading the paper! Here is a <a href="http://www.math.ualberta.ca/~bowman/publications/asyTUG3.pdf">demo file</a> where you can try it out; it doesn’t work for my in-browser pdf previewer, but is fine when opened as a stand-alone pdf. It seems somewhat less author-friendly and more likely to crash your .pdf reader. But, it’s reasonable to say that the best way to learn about 3D geometry should be to play with the object as if it were in your own hands.</p></div></content><updated planet:format="June 03, 2012 05:53 PM">2012-06-03T17:53:25Z</updated><published planet:format="June 03, 2012 05:53 PM">2012-06-03T17:53:25Z</published><category term="diagrams"/><category term="geometry"/><category term="LaTeX"/><category term="toc"/><author><name>daveagp</name></author><source><id>https://daveagp.wordpress.com</id><logo>https://secure.gravatar.com/blavatar/0c75bc2d5e38ccd4ac9254b60147fa59?s=96&amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</logo><link href="https://daveagp.wordpress.com/category/toc/feed/" rel="self" type="application/atom+xml"/><link href="https://daveagp.wordpress.com" rel="alternate" type="text/html"/><link href="https://daveagp.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/><link href="https://daveagp.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/><subtitle>Dave Pritchard's algorithms, recipes, etc</subtitle><title>toc – QED and NOM</title><updated planet:format="December 17, 2018 05:29 AM">2018-12-17T05:29:51Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;4252feb7c4c6b2e1113a66a7070692e6&quot;</planet:http_etag><planet:http_last_modified>Mon, 17 Dec 2018 05:29:50 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>david-pritchard</planet:css-id><planet:face>pritchard.jpeg</planet:face><planet:name>David Pritchard</planet:name><planet:http_location>https://daveagp.wordpress.com/category/toc/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>
