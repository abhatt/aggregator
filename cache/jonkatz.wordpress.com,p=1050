<?xml version="1.0" encoding="utf-8"?><entry xml:lang="en" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://jonkatz.wordpress.com/?p=1050</id><link href="https://jonkatz.wordpress.com/2014/01/14/real-world-crypto-day-2-session-2/" rel="alternate" type="text/html"/><title>Real-World Crypto, Day 2, Session 2</title><summary>The second session was on encryption. Jonathan Trostle kicked things off with a talk about authenticated encryption. Besides the “standard” security goals, he mentioned the idea of misuse resistance which requires, roughly that nonce reuse by the sender only leaks whether the same message is encrypted twice (using the same nonce) but otherwise does not […]<div class="commentbar"><p/></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The second session was on encryption. Jonathan Trostle kicked things off with a talk about authenticated encryption. Besides the “standard” security goals, he mentioned the idea of <em>misuse resistance </em>which requires, roughly that nonce reuse by the sender only leaks whether the same message is encrypted twice (using the same nonce) but otherwise does not breach privacy or authenticity. Jonathan’s talk focused on “lightweight” authenticated encryption schemes, that aim to minimize network overhead (i.e., ciphertext length) as well as the amount of energy expended per encrypted byte.</p>
<p>One point he made, which is obvious but nevertheless bears repeating (especially in light of the <a href="http://competitions.cr.yp.to/caesar.html">CAESAR competition</a>), is that there is unlikely to be a single “best” authenticated-encryption scheme. The best scheme to use depends on the application (e.g., how many messages will be encrypted using a given key) or the deployment environment (e.g., hardware/software, or the relative cost of computation vs. transmission). It would be useful, therefore, to have a set of algorithms standardized, suited for different uses.</p>
<p>Tom Shrimpton spoke next about format-transforming encryption. (I had heard a previous talk on this topic by his student, Kevin Dyer.) The basic goal here is to make encrypted data “look like” other data so as to prevent it from being filtered using deep-packet inspection (DPI), as <a href="https://opennet.net/">several countries do</a>. DPI looks at payload-level information, including the data itself as well as information about what applications are being used. “Regular” encryption does not help here, since the very fact that encryption is being used may cause the packet to be filtered out; more specifically, the DPI may be using a whitelist of allowed applications and/or words. Previous work in this space was slow, inflexible, and lacked empirical validation.</p>
<p>So, the goal is to develop a (private-key) cryptographic transformation that makes arbitrary traffic look like “benign” traffic from some other application. The transformation will take as input a [specification of a] set of strings that the DPI will classify in the desired way, and output ciphertexts that will match the desired classification. This is very flexible, since the desired format can be changed, as needed.</p>
<p>Almost all the DPIs evaluated use regular expressions (or something close to that) to perform filtering. So the specification of strings that will be allowed to pass the DPI corresponds to a regular language, that furthermore can be learned from the traffic that is allowed to pass.</p>
<p>To map ciphertexts to words of the regular language, the key insight is to using <em>ranking</em>, that is, an efficiently computable/reversible map from integers to words in the regular language. (This was shown to be possible by Goldberg and Sipser in 1985. It turns out that this gives exactly the rank of a word in the lexicographic ordering of the words in the language) Given this, the solution is relatively straightforward: encrypt the plaintext as usual to get some ciphertext; view the ciphertext as a series of integers; then map these integers to words of the language. There are, as is to be expected, several practical difficulties that emerge in trying to get this to work in practice, but Tom and his co-authors show that <a href="http://fteproxy.org">this can be done</a>.</p>
<p>One question I was left with was whether the approach can be applied to DPI based on <em>blacklists</em>. While it is true that the complement of a regular language is still regular, the complexity of ranking depends on the size of the regular language [sic — see below] and so may get too large. (In the Q&amp;A, Tom claimed that everything still works, so I guess I’ll have to look in the paper for details. Update: after reading my original post, Tom clarified that the complexity depends on the size of the DFA for the language, not the size of the language. Since a regular language and its complement have DFAs of the same size, everything works out fine.)</p>
<p>In the final talk of the session, Mike Bond spoke about “Crypto as a service,” i.e., providing crypto for other organizations. (This is something his company, Cryptomathic, is working on.) This raises a number of practical questions, such as backing up keys, updating keys, and achieving key separation. There is also the question of making the crypto API useable (and understandable) to the client.  He gave a walkthrough of a banking application that might use the service. Admittedly, this was a bit outside my expertise.</p></div></content><updated planet:format="January 14, 2014 04:49 PM">2014-01-14T16:49:13Z</updated><published planet:format="January 14, 2014 04:49 PM">2014-01-14T16:49:13Z</published><category term="Crypto"/><author><name>jonkatz</name></author><source><id>https://jonkatz.wordpress.com</id><logo>https://s0.wp.com/i/buttonw-com.png</logo><link href="https://jonkatz.wordpress.com/category/tcs/feed/" rel="self" type="application/atom+xml"/><link href="https://jonkatz.wordpress.com" rel="alternate" type="text/html"/><link href="https://jonkatz.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/><link href="https://jonkatz.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/><subtitle>Random thoughts about random things...by Jonathan Katz</subtitle><title>TCS – Random bits</title><updated planet:format="December 17, 2018 05:29 AM">2018-12-17T05:29:28Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;f68702a61d1c1378b1780332cf6a55a8&quot;</planet:http_etag><planet:http_last_modified>Mon, 17 Dec 2018 05:29:27 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>jonathan-katz</planet:css-id><planet:face>katz.png</planet:face><planet:name>Jonathan Katz</planet:name><planet:http_location>https://jonkatz.wordpress.com/category/tcs/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>
