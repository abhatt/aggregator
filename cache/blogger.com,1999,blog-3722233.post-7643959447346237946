<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-3722233.post-7643959447346237946</id><link href="https://blog.computationalcomplexity.org/2018/11/logcfl-venkat-style.html" rel="alternate" type="text/html"/><title>LOGCFL Venkat Style</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><a href="http://2.bp.blogspot.com/-8z80agwTYFc/W_2yfnwcSeI/AAAAAAABkkI/suMTF6i4KIw_eXiovd2e0iY7qTx4PCGOACK4BGAYYCw/s1600/Venkat_V3A2528.jpg" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"><img border="0" height="133" src="https://2.bp.blogspot.com/-8z80agwTYFc/W_2yfnwcSeI/AAAAAAABkkI/suMTF6i4KIw_eXiovd2e0iY7qTx4PCGOACK4BGAYYCw/s200/Venkat_V3A2528.jpg" width="200"/></a>H. Venkateswaran, a much loved professor in the School of Computer Science at Georgia Tech and a fellow computational complexity theorist, is retiring at the end of December. In honor of Venkat I'd like talk about my <a href="https://doi.org/10.1016/0022-0000(91)90020-6">favorite paper</a> of his, relating LOGCFL to semi-unbounded circuits.<br/>
<br/>
Let's start with context-free languages. Even if you never took a theoretical computer science course, you probably saw them in elementary school.<br/>
<br/>
<div class="separator" style="clear: both; text-align: center;">
<a href="https://1.bp.blogspot.com/-YrhZOme8LU0/W_1SmeVPD4I/AAAAAAABkjA/YEpK6cBnhWgNryw6gI08Oa6elL8EtfH6gCLcBGAs/s1600/ch08-tree-4.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="214" src="https://1.bp.blogspot.com/-YrhZOme8LU0/W_1SmeVPD4I/AAAAAAABkjA/YEpK6cBnhWgNryw6gI08Oa6elL8EtfH6gCLcBGAs/s320/ch08-tree-4.png" width="320"/></a></div>
<br/>
A context-free language is a series of rules like S-&gt; NP VP or N-&gt;man. The <i>context-free</i> part comes from the fact that a noun phrase (NP) produces the same sentence fragments wherever it appears. CFLs have a rich theory--there have been <a href="https://books.google.com/books?id=ZO9LAAAAMAAJ">whole textbooks</a> devoted to the topics.<br/>
<br/>
LOGCFL are the set of problems that are reducible to context-free languages with a small-space reduction. Formally, A is in LOGCFL if there is a CFL B and a log-space computable function f such that for all x, x is in A if and only if f(x) is in B.<br/>
<br/>
Venkat showed that LOGCFLs are equivalent to semi-unbounded circuits, log-depth circuits with unbounded OR gates but bounded AND gates, the class now called SAC<sup>1</sup> (technically the equivalence holds for log-space uniform SAC<sup>1</sup> but that's not important). His proof goes through various models of alternating Turing machines and push-down automata.<br/>
<br/>
Context-free languages are not closed under complement, for example 0<sup>n</sup>1<sup>n</sup>0<sup>n</sup> is not context-free but its complement is. Somewhat surprisingly Borodin, Cook, Dymond, Ruzzo and Tompa <a href="https://doi.org/10.1137/0218038">showed</a> that LOGCFL is closed under complement, combining the <a href="https://blog.computationalcomplexity.org/2003/06/foundations-of-complexity-lesson-19.html">Immerman-Szelepcsényi</a> inductive counting technique with Venkat's circuit characterization of LOGCFL.<br/>
<br/>
The Borodin result implies that you whether you have bounded ORs and unbounded ANDs, or bounded ANDs and unbounded ORs, you compute the same class.<br/>
<br/>
Enjoy your retirement Venkat. We'll miss you!</div><div class="commentbar"><p/></div></summary><updated planet:format="November 28, 2018 06:27 PM">2018-11-28T18:27:00Z</updated><published planet:format="November 28, 2018 06:27 PM">2018-11-28T18:27:00Z</published><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><source><id>tag:blogger.com,1999:blog-3722233</id><category term="typecast"/><category term="focs metacomments"/><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/><link href="https://blog.computationalcomplexity.org/feeds/posts/default?alt=rss" rel="self" type="application/atom+xml"/><subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle><title>Computational Complexity</title><updated planet:format="December 17, 2018 01:56 AM">2018-12-17T01:56:55Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;3c48828af0b9b548c409eba7b894fc342a0679ccd23a3f1db96c1212435d64c9&quot;</planet:http_etag><planet:http_last_modified>Sun, 16 Dec 2018 21:24:54 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>computational-complexity</planet:css-id><planet:face>gasarch.png</planet:face><planet:name>Computational Complexity</planet:name><planet:http_status>200</planet:http_status></source></entry>
