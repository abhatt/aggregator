<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-4068183698747623113.post-6725793973565807590</id><link href="http://teachingintrotocs.blogspot.com/feeds/6725793973565807590/comments/default" rel="replies" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/2012/01/push-pull.html#comment-form" rel="replies" type="text/html"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/6725793973565807590" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/6725793973565807590" rel="self" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/2012/01/push-pull.html" rel="alternate" type="text/html"/><title>Push-pull</title><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I just saw a talk by Thomas Sauerwald analyzing the push-pull protocol for broadcasting in graph-theoretical models for social networks. If you ask your search engine for push-pull, many answers come up, related to aviation, physics, flirting, and marketing. But this is different.<br/><br/>To broadcast information, in the <i>push</i> protocol, at every round every node that has the information rudely shares it with a random neighbor, whether that neighbor wants it or not. In the <i>pull</i> protocol, at every round every node that does not yet have the information extracts it from a random neighbor, if that neighbor has the information. In the <i>push-pull</i> protocol, both behaviors occur. <br/><br/>Q: How many rounds before 99% of the nodes are informed? <br/>A: log log n if the network is a Chung-Lu random graph model for social networks (parameterized such that the average distance between two nodes is log log n.) That's the result.<br/><br/>Q: What's the Chung-Lu model?<br/>A: each node i has a weight w(i), and edge {i,j} is in the network independently with probability min(1,w(i)w(j)/W), where W is the sum of all weights.  w(i) is such that the distribution of degrees follows a power law (with parameter beta).<br/><br/>Q: How about informing not just 99% but 100% of the nodes?<br/>A: the diameter is roughly logarithmic, so, there is no way that you can inform 100% of the nodes in time log log n. In a social network, when something goes viral,  1% of the crowd will remain clueless in spite of your efforts. The solution: just forget abut them. We're the 99%!<br/><br/>Q: What's the rough idea of the proof?<br/>A: Partition nodes into classes according to (the log log of) their degree, (rounded to the nearest integer.)<br/>0. The information initially belongs to a random node.<br/>1. After log log n rounds it reaches a node in the highest class.<br/>2. After a few more rounds it reaches (50% of) the nodes in the highest class.<br/>3. After another log log n rounds it goes from there to almost all network nodes.<br/><br/>Step 2 contains some intuition: In the Chung-Lu model, two nodes x and y of high class (i.e. high degree) are probably connected by a path of length 2 via an intermediate node z of degree 2. If x has the information, then z will pull it from x after a couple of steps, and then z will pass it on to y after a couple more steps, so nodes of degree 2 transmit information in a constant number of rounds. In other words, small degree nodes are good for passing on information quickly to everyone they know. So what matters in the large degree nodes is really their degree-2 neighbors: those will immediately pull the information and share it across to their other neighbor, thus roughly reducing the GOSSIP mode of communication to a LOCAL mode of communication.<br/><br/>Q: Is the push-pull protocol realistic?<br/>A: It's not inconceivable. Pushing corresponds to, say, sending an email to a single (or a few) recipient(s) to share information: &quot;Have you heard? Abe and Amy broke up!&quot;. Pulling corresponds to asking your friend: &quot;How are Abe and Amy doing? I haven't seen them lately&quot; or checking their Facebook page, and then, if you find the piece of information which you were waiting for &quot;Status: single&quot;, adding a note about it on your own Facebook wall: &quot;Hey everyone, look, Abe is no longer in a  relationship. He's single! How exciting!&quot;. (I am having trouble imagining why someone seemingly so interested in that piece of information would want to broadcast it to the rest of the world, but if that's the only reason why the protocol is not perfectly realistic, I'll give it a pass.)<br/><br/>Q: Is the Chung-Lu model realistic?<br/>A: Maybe since it's a reasonably good fit with reality according to several statistics. But there is no way to know for sure, is there?<br/><br/>Q: Is the above log log n result robust? Does it still  hold if the push-pull protocol or the Chung-Lu network is replaced by something similar but different?<br/>A: The proof presumably breaks down. The result might still be true if the graph has small average distance and if it has some small degree nodes adjacent to large degree nodes.<br/><br/>Q: Is the synchronous assumption realistic?<br/>A: In the asynchronous model in which each node has a Poisson clock, the log log n becomes a 1. That's because x and y don't just have a path of length 2 going through node z: they have many such paths going through z1, z2, â€¦, and one of them goes through a node whose Poisson clock rings twice in rapid succession: &quot;Zap! Get that info from x! Zap! Tell y about it, quick, to be the first one!&quot;  and transmits information almost instantaneously. So we don't mind if synchronicity does not hold, quite the opposite!<br/><br/>Q: What about other graphs?<br/>A: In general graphs, the idea of reducing GOSSIP to LOCAL has been explored by Kelner, Censor-Hillel, Haeupler and Maymounkov. The two modes differ by at most an additive polylog(n).</div><div class="commentbar"><p/><span class="commentbutton" href="http://teachingintrotocs.blogspot.com/feeds/6725793973565807590/comments/default"/><a href="http://teachingintrotocs.blogspot.com/feeds/6725793973565807590/comments/default"><img class="commenticon" src="/images/feed-icon.png"/> Subscribe to comments</a><![CDATA[  | ]]><a href="http://teachingintrotocs.blogspot.com/2012/01/push-pull.html#comment-form"><img class="commenticon" src="/images/post-icon.png"/> Post a comment</a></div></content><updated planet:format="January 06, 2012 10:12 AM">2012-01-06T10:12:00Z</updated><published planet:format="January 06, 2012 10:12 AM">2012-01-06T10:12:00Z</published><category scheme="http://www.blogger.com/atom/ns#" term="TCS"/><author><name>Claire Mathieu</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/10957755706440077623</uri></author><source><id>tag:blogger.com,1999:blog-4068183698747623113</id><category term="TCS"/><category term="Oops"/><category term="technology"/><author><name>Claire Mathieu</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/10957755706440077623</uri></author><link href="http://teachingintrotocs.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/-/TCS" rel="self" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/search/label/TCS" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/><title>A CS Professor's blog</title><updated planet:format="August 31, 2018 11:03 AM">2018-08-31T11:03:02Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;8089cd57e1113cac488458ecc6b57d2f5d63c2f2cb0051d1de6e12d23ed12d82&quot;</planet:http_etag><planet:http_last_modified>Fri, 31 Aug 2018 11:03:02 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>claire-mathieu</planet:css-id><planet:face>mathieu.jpeg</planet:face><planet:name>Claire Mathieu</planet:name><planet:filters>category.py?cats=tcs</planet:filters><planet:http_status>200</planet:http_status></source></entry>

