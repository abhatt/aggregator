<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-19908808.post-6812022639293292087</id><link href="http://andysresearch.blogspot.com/feeds/6812022639293292087/comments/default" rel="replies" type="application/atom+xml"/><link href="http://www.blogger.com/comment.g?blogID=19908808&amp;postID=6812022639293292087" rel="replies" type="text/html"/><link href="http://www.blogger.com/feeds/19908808/posts/default/6812022639293292087" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/19908808/posts/default/6812022639293292087" rel="self" type="application/atom+xml"/><link href="http://andysresearch.blogspot.com/2011/06/joint-computational-complexity-and-buy_15.html" rel="alternate" type="text/html"/><title>Joint computational complexity, and the &quot;buy-one-get-one-free conjecture&quot;</title><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">Below is a simple-to-state open question, stemming from </span><a href="http://arxiv.org/abs/0808.2662"><span style="color: #002bee;"><span class="Apple-style-span" style="font-size: large;">this</span></span></a><span class="Apple-style-span" style="font-size: large;"> paper of mine from CCC'09. First, I'll state the question; then I'll give some background, explaining how it's an instance of a more general and significant problem.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">The question</span></b></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">Let's consider the standard two-party model of communication complexity. Given inputs </span><i><span class="Apple-style-span" style="font-size: large;">x</span></i><span class="Apple-style-span" style="font-size: large;"> and </span><i><span class="Apple-style-span" style="font-size: large;">y </span></i><span class="Apple-style-span" style="font-size: large;">to Alice and Bob respectively, suppose there are 3 functions the two parties are interested in evaluating on these inputs---let's call them </span><i><span class="Apple-style-span" style="font-size: large;">F(x, y), G(x, y), H(x, y).</span></i></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">Question: </span></b><span class="Apple-style-span" style="font-size: large;">is there a collection of total functions </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;">, and a positive value </span><i><span class="Apple-style-span" style="font-size: large;">T</span></i><span class="Apple-style-span" style="font-size: large;">, such that:</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">(i) </span></b><span class="Apple-style-span" style="font-size: large;">any one of </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">,</span><i><span class="Apple-style-span" style="font-size: large;"> G</span></i><span class="Apple-style-span" style="font-size: large;">,</span><i><span class="Apple-style-span" style="font-size: large;"> H</span></i><span class="Apple-style-span" style="font-size: large;"> requires at least </span><i><span class="Apple-style-span" style="font-size: large;">T</span></i><span class="Apple-style-span" style="font-size: large;"> bits of communication to compute;</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">(ii)</span></b><span class="Apple-style-span" style="font-size: large;"> any </span><b><span class="Apple-style-span" style="font-size: large;">two</span></b><span class="Apple-style-span" style="font-size: large;"> of </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">,</span><i><span class="Apple-style-span" style="font-size: large;"> G</span></i><span class="Apple-style-span" style="font-size: large;">,</span><i><span class="Apple-style-span" style="font-size: large;"> H</span></i><span class="Apple-style-span" style="font-size: large;"> can be computed in </span><i><span class="Apple-style-span" style="font-size: large;">(1.01 T)</span></i><span class="Apple-style-span" style="font-size: large;"> bits of communication, on a </span><b><span class="Apple-style-span" style="font-size: large;">common input</span></b><span class="Apple-style-span" style="font-size: large;"> </span><i><span class="Apple-style-span" style="font-size: large;">(x, y)</span></i><span class="Apple-style-span" style="font-size: large;">;</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">(iii)</span></b><span class="Apple-style-span" style="font-size: large;"> but, computing all three of </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;"> on a common input requires at least </span><i><span class="Apple-style-span" style="font-size: large;">(1.99 T)</span></i><span class="Apple-style-span" style="font-size: large;"> bits of communication.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">I believe such a collection exists. We can call this the </span><b><span class="Apple-style-span" style="font-size: large;">'buy-one-get-one-free conjecture'</span></b><span class="Apple-style-span" style="font-size: large;">: Think of </span><i><span class="Apple-style-span" style="font-size: large;">T</span></i><span class="Apple-style-span" style="font-size: large;"> as the individual 'price' of the 'items' </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;">; we want to arrange a special 'deal' where the second item is essentially free, but one has to pay full-price for the third item.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">Now if you think about it, what we're looking for is pretty strange.  The function </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;"> should be efficiently computable in at least two 'essentially different' ways---one of which also gives us the value of </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;">, and one of which gives </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;">---yet there should be no efficient scheme to compute </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;"> that gives us </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;"> and </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;"> simultaneously. (This property seems easier to contrive when the inputs </span><i><span class="Apple-style-span" style="font-size: large;">x, y</span></i><span class="Apple-style-span" style="font-size: large;"> are assumed to have a special, correlated form; I rule this out by insisting that </span><i><span class="Apple-style-span" style="font-size: large;">F, G, H</span></i><span class="Apple-style-span" style="font-size: large;"> be </span><i><span class="Apple-style-span" style="font-size: large;">total</span></i><span class="Apple-style-span" style="font-size: large;"> functions.)</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">The question makes equal sense when posed for other models of computation. In my </span><a href="http://arxiv.org/abs/0808.2662"><span style="color: #002bee;"><span class="Apple-style-span" style="font-size: large;">paper</span></span></a><span class="Apple-style-span" style="font-size: large;">, I proved the corresponding conjecture in the decision tree model of computation, as a special case of a more general result--see below. Communication complexity could be a reasonable model to attack next.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">Please note: </span></b><span class="Apple-style-span" style="font-size: large;">While this conjecture may require lower-bounds expertise to resolve, I believe that anyone with a creative spark could make an important contribution, by coming up with a good set of </span><i><span class="Apple-style-span" style="font-size: large;">candidate functions</span></i><span class="Apple-style-span" style="font-size: large;"> </span><i><span class="Apple-style-span" style="font-size: large;">F, G, H</span></i><span class="Apple-style-span" style="font-size: large;">. Please feel encouraged to share any ideas you might have.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">Background on the question</span></b></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">Let </span><i><span class="Apple-style-span" style="font-size: large;">cc(F)</span></i><span class="Apple-style-span" style="font-size: large;"> denote the (deterministic) communication complexity of computing </span><i><span class="Apple-style-span" style="font-size: large;">F(x, y)</span></i><span class="Apple-style-span" style="font-size: large;">. Next, let </span><i><span class="Apple-style-span" style="font-size: large;">cc(F, G)</span></i><span class="Apple-style-span" style="font-size: large;"> denote the communication complexity of computing </span><i><span class="Apple-style-span" style="font-size: large;">F(x, y) </span></i><span class="Apple-style-span" style="font-size: large;">and </span><i><span class="Apple-style-span" style="font-size: large;">G(x, y)</span></i><span class="Apple-style-span" style="font-size: large;">---on the </span><i><span class="Apple-style-span" style="font-size: large;">same</span></i><span class="Apple-style-span" style="font-size: large;"> input-pair </span><i><span class="Apple-style-span" style="font-size: large;">(x, y)</span></i><span class="Apple-style-span" style="font-size: large;">. We define </span><i><span class="Apple-style-span" style="font-size: large;">cc(F, H)</span></i><span class="Apple-style-span" style="font-size: large;">,</span><i><span class="Apple-style-span" style="font-size: large;"> cc(G, H)</span></i><span class="Apple-style-span" style="font-size: large;">, and </span><i><span class="Apple-style-span" style="font-size: large;">cc(F, G, H)</span></i><span class="Apple-style-span" style="font-size: large;"> similarly.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">Together, we think of these various quantities as summarizing the 'joint complexity' of the collection </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;">. Of course, this notion can be extended to collections of </span><i><span class="Apple-style-span" style="font-size: large;">k &gt; 3</span></i><span class="Apple-style-span" style="font-size: large;"> functions; the joint complexity is summarized by giving the communication complexity of all </span><i><span class="Apple-style-span" style="font-size: large;">2^k</span></i><span class="Apple-style-span" style="font-size: large;"> subsets of the collection. Let's let </span><i><span class="Apple-style-span" style="font-size: large;">JC</span></i><span class="Apple-style-span" style="font-size: large;"> denote the function that takes as input a </span><i><span class="Apple-style-span" style="font-size: large;">k</span></i><span class="Apple-style-span" style="font-size: large;">-bit vector, and returns the complexity of computing the corresponding subcollection. So, in our 3-function example, we have</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><i><span class="Apple-style-span" style="font-size: large;">JC(1, 1, 0) = cc(F, G)</span></i><span class="Apple-style-span" style="font-size: large;"> and </span><i><span class="Apple-style-span" style="font-size: large;">JC(0, 0, 1) = cc(H)</span></i><span class="Apple-style-span" style="font-size: large;">.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">The question we want to ask is: what kinds of behavior are </span><i><span class="Apple-style-span" style="font-size: large;">possible</span></i><span class="Apple-style-span" style="font-size: large;"> with the joint complexity, if we allow the functions </span><i><span class="Apple-style-span" style="font-size: large;">F</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">G</span></i><span class="Apple-style-span" style="font-size: large;">, </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;">, etc. to be chosen arbitrarily? In other words, what different types of 'efficiencies' can arise in a collection of computational tasks (in the communication model)?</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">A little thought reveals some obvious constraints:</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">1.</span></b><span class="Apple-style-span" style="font-size: large;"> the joint complexity function </span><i><span class="Apple-style-span" style="font-size: large;">JC</span></i><span class="Apple-style-span" style="font-size: large;"> must always be nonnegative and integral-valued, with </span><i><span class="Apple-style-span" style="font-size: large;">JC(</span></i><b><i><span class="Apple-style-span" style="font-size: large;">0</span></i></b><i><span class="Apple-style-span" style="font-size: large;">) = 0</span></i><span class="Apple-style-span" style="font-size: large;">.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">2. monotonicity: </span></b><span class="Apple-style-span" style="font-size: large;">Enlarging the subset of the functions to be computed cannot decrease the complexity. For example, we always have </span><i><span class="Apple-style-span" style="font-size: large;">cc(F, G) &gt;= cc(F)</span></i><span class="Apple-style-span" style="font-size: large;">, which translates to J</span><i><span class="Apple-style-span" style="font-size: large;">C(1, 1, 0) &gt;= JC(1, 0, 0)</span></i><span class="Apple-style-span" style="font-size: large;">.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><b><span class="Apple-style-span" style="font-size: large;">3. subadditivity:</span></b><span class="Apple-style-span" style="font-size: large;"> Taking the union of two subsets of functions to be computed cannot increase the complexity beyond the sum of the individual complexities of the subsets. For example, </span><i><span class="Apple-style-span" style="font-size: large;">cc(F, G, H) &lt;= cc(F, G) + cc(H)</span></i><span class="Apple-style-span" style="font-size: large;">, since we can always compute </span><i><span class="Apple-style-span" style="font-size: large;">(F, G)</span></i><span class="Apple-style-span" style="font-size: large;"> in an optimal fashion first, then compute </span><i><span class="Apple-style-span" style="font-size: large;">H</span></i><span class="Apple-style-span" style="font-size: large;"> optimally afterwards.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">(Technically, this assumes that in our model both players always know when a communication protocol halts, so that they can combine two protocols sequentially without any additional overhead. No big deal, though.)</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">Now, a little further thought reveals that… well, there really </span><i><span class="Apple-style-span" style="font-size: large;">aren't</span></i><span class="Apple-style-span" style="font-size: large;"> any other obvious, general constraints on the joint complexity! Let's call </span><b><i><span class="Apple-style-span" style="font-size: large;">C</span></i></b><span class="Apple-style-span" style="font-size: large;"> an </span><i><span class="Apple-style-span" style="font-size: large;">Economic Cost Function (ECF)</span></i><span class="Apple-style-span" style="font-size: large;"> if it obeys constraints 1-3. We are tempted to conjecture that perhaps </span><i><span class="Apple-style-span" style="font-size: large;">every</span></i><span class="Apple-style-span" style="font-size: large;"> ECF is in fact equal to the joint complexity (in the communication model) of </span><i><span class="Apple-style-span" style="font-size: large;">some</span></i><span class="Apple-style-span" style="font-size: large;"> particular collection of functions.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">There are two things wrong with this conjecture. First, it's false, as can be seen by a simple counterexample: namely, the &quot;buy-one-get-one-free&quot; example, with </span><i><span class="Apple-style-span" style="font-size: large;">T</span></i><span class="Apple-style-span" style="font-size: large;"> set to 1. That's how I stumbled onto this example, and is one reason why I find it interesting.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">However, if we relax the problem, and just ask to realize some </span><i><span class="Apple-style-span" style="font-size: large;">scalar multiple</span></i><span class="Apple-style-span" style="font-size: large;"> of </span><b><i><span class="Apple-style-span" style="font-size: large;">C</span></i></b><span class="Apple-style-span" style="font-size: large;"> as a joint complexity function, this counterexample loses its force.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">The second thing wrong with the conjecture (in its relaxed form) is that, even if true, it'd likely be impossible to prove. This is because determining the </span><i><span class="Apple-style-span" style="font-size: large;">exact</span></i><span class="Apple-style-span" style="font-size: large;"> computational cost of even modestly-complicated tasks is just way too hard. So I propose a doubly-relaxed form of the conjecture: I conjecture that if </span><b><i><span class="Apple-style-span" style="font-size: large;">C</span></i></b><span class="Apple-style-span" style="font-size: large;"> is an ECF, then there is a joint complexity function that is a good </span><i><span class="Apple-style-span" style="font-size: large;">pointwise approximation</span></i><span class="Apple-style-span" style="font-size: large;"> to some scalar multiple of </span><b><i><span class="Apple-style-span" style="font-size: large;">C</span></i></b><span class="Apple-style-span" style="font-size: large;">. (Here we allow a </span><i><span class="Apple-style-span" style="font-size: large;">(1 +- eps) </span></i><span class="Apple-style-span" style="font-size: large;">multiplicative error.)</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">In my </span><a href="http://arxiv.org/abs/0808.2662"><span style="color: #002bee;"><span class="Apple-style-span" style="font-size: large;">paper</span></span></a><span class="Apple-style-span" style="font-size: large;">, I managed to prove the corresponding conjecture for the model of decision trees (aka deterministic query algorithms). Several interesting ingredients were needed for the proof.  </span><span class="Apple-style-span"><span class="Apple-style-span" style="font-size: large;">Now, why do I believe the conjecture should also hold true for the communication model? In a nutshell, I think it should be possible to 'embed' tasks in the query model into the communication model, by a suitable distributed encoding of each bit, in such a way that the relative costs of all computational tasks are approximately preserved. If this could be shown, the result in the communication model would follow from my result for decision trees. (See the paper for more details.)</span></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">We may not be ready for an attack on the general conjecture, however. In particular, we </span><i><span class="Apple-style-span" style="font-size: large;">seem</span></i><span class="Apple-style-span" style="font-size: large;"> to require a much better understanding of so-called 'Direct Sum problems' in communication complexity. Thus, I offer the 'buy-one-get-one-free conjecture' as a simpler, more concrete problem on which we can hope to make progress sooner.</span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Helvetica;"><span class="Apple-style-span" style="font-size: large;"><br/></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 24.0px Georgia;"><span class="Apple-style-span" style="font-size: large;">In the decision tree model, my result allows us to realize an ECF of the 'buy-one-get-one-free' type as a joint complexity function; but I </span><i><span class="Apple-style-span" style="font-size: large;">don't</span></i><span class="Apple-style-span" style="font-size: large;"> know of any method for this that's significantly simpler than my general construction.  Even finding such a simpler method in the decision tree model would be a very nice contribution, and might lead to new ideas for the more general problem.</span></p></div><div class="commentbar"><p/><span class="commentbutton" href="http://andysresearch.blogspot.com/feeds/6812022639293292087/comments/default"/><a href="http://andysresearch.blogspot.com/feeds/6812022639293292087/comments/default"><img class="commenticon" src="/images/feed-icon.png"/> Subscribe to comments</a><![CDATA[  | ]]><a href="http://www.blogger.com/comment.g?blogID=19908808&amp;postID=6812022639293292087"><img class="commenticon" src="/images/post-icon.png"/> Post a comment</a></div></content><updated planet:format="June 15, 2011 02:21 PM">2011-06-15T14:21:00Z</updated><published planet:format="June 15, 2011 02:21 PM">2011-06-15T14:21:00Z</published><category scheme="http://www.blogger.com/atom/ns#" term="complexity"/><author><name>Andy D</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/03897281159810085972</uri></author><source><id>tag:blogger.com,1999:blog-19908808</id><category term="general math"/><category term="puzzles"/><category term="complexity"/><category term="geometry"/><category term="computability"/><category term="probability"/><category term="crypto"/><category term="grad life"/><category term="miscellaneous"/><category term="the infinite"/><author><name>Andy D</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/03897281159810085972</uri></author><link href="http://andysresearch.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/19908808/posts/default" rel="self" type="application/atom+xml"/><link href="http://andysresearch.blogspot.com/" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/><link href="http://www.blogger.com/feeds/19908808/posts/default?start-index=26&amp;max-results=25" rel="next" type="application/atom+xml"/><subtitle>Sporadic notes on mathematical and non-mathematical topics, from a student of computational complexity.</subtitle><title>Andy's Math/CS page</title><updated planet:format="September 17, 2018 03:07 AM">2018-09-17T03:07:28Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;d66a335240ef742735b44062ca3f549f737aff49db8f80c3136efce6dd24696a&quot;</planet:http_etag><planet:http_last_modified>Mon, 17 Sep 2018 03:07:28 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>andy-s-math-cs-page</planet:css-id><planet:face>andy.jpeg</planet:face><planet:name>Andy's Math/CS page</planet:name><planet:http_status>200</planet:http_status></source></entry>
