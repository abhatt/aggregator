<?xml version="1.0" ?><entry xml:lang="en" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://daveagp.wordpress.com/?p=1316</id><link href="https://daveagp.wordpress.com/2012/12/14/a-booles-errand/" rel="alternate" type="text/html"/><title>A Boole’s Errand</title><summary>Did you know this is the last day of CS Education Week? The creators of this event are highly engaged in bringing Computer Science to more high schools — in many states, CS is not given full consideration in the curriculum and this is shocking to me given that children are using computers not much later than […]</summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Did you know this is the last day of <a href="http://www.csedweek.org/">CS Education Week</a>? The creators of this event are highly engaged in bringing Computer Science to more high schools — in many states, CS is not given full consideration in the curriculum and this is shocking to me given that children are using computers not much later than they can read and write. But, let me leave you with a link to a <a href="http://www.acm.org/runningonempty/index.html">very detailed report</a> if you want to know more, and instead ask you some puzzles.</p>
<p>In Boolean algebra (named after <a href="http://en.wikipedia.org/wiki/George_Boole">George Boole</a>) you manipulate the symbols T (for true) and F (for false). This is useful to help analyze, understand, and simplify the flow of logic in computer programs and electronic circuits. The <strong>NOT</strong> function swaps T to F and vice-versa, for example <strong>NOT</strong>(F) = T and <strong>NOT</strong>(T) = F. One way to combine two values is with the <strong>OR</strong> function: if you give it two of the same input it gives you the same one back, but if you give it a mix of T’s and F’s it gives you back T. For example <strong>OR</strong>(T, F) = T and <strong>OR</strong>(F, F) = F. <strong>AND</strong> does the same thing, but it gives you back F if the inputs are a mix of T and F.</p>
<p>A couple of miraculous things happen from these definitions. One is <a href="http://en.wikipedia.org/wiki/Augustus_DeMorgan">DeMorgan</a>‘s Law, which says that</p>
<ul>
<li><strong>NOT</strong>(<strong>AND</strong>(<em>x</em>, <em>y</em>)) = <strong>OR</strong>(<strong>NOT</strong>(<em>x</em>), <strong>NOT</strong>(<em>y</em>)), no matter what the values of <em>x</em> and <em>y</em> are;</li>
<li>similarly <strong>NOT</strong>(<strong>OR</strong>(<em>x</em>, <em>y</em>)) = <strong>AND</strong>(<strong>NOT</strong>(<em>x</em>), <strong>NOT</strong>(<em>y</em>)).</li>
</ul>
<p>In a sense, this law says that <strong>NOT</strong> turns <strong>AND</strong> in to <strong>OR</strong> and vice-versa.</p>
<p>Another one is that we get a distributive law</p>
<ul>
<li><strong>AND</strong>(<em>x</em>, <strong>OR</strong>(<em>y</em>, <em>z</em>)) = <strong>OR</strong>(<strong>AND</strong>(<em>x</em>, <em>y</em>), <strong>AND</strong>(<em>x</em>, <em>z</em>)), no matter what the values of <em>x, y, </em>and <em>z</em> are;</li>
<li>similarly <strong>OR</strong>(<em>x</em>, <strong>AND</strong>(<em>y</em>, <em>z</em>)) = <strong>AND</strong>(<strong>OR</strong>(<em>x</em>, <em>y</em>), <strong>OR</strong>(<em>x</em>, <em>z</em>)).</li>
</ul>
<p>So this is like arithmetic where <em>x</em>*(<em>y</em>+<em>z</em>) = <em>x*y + x*z</em> but continuing the analogy, somehow for Boolean algebra we also have <em>x+y*z = (x+y)*(x+z)</em>, which is not like arithmetic.</p>
<p>Finally, there is a function <strong>XOR</strong> (exclusive or) which is a cousin of <strong>OR</strong>. Note that in English sometimes we use “or” to mean the “<strong>OR</strong>” function described  above: “you’re not allowed to drive if you have no license <strong>OR</strong> you’re drunk” (or both). But in English sometimes “or” means “either but not both,” like “this combo comes with a salad or fries” — in this case you can’t get both. This is <strong>XOR</strong> in Boolean logic: it has the same behaviour as <strong>OR</strong> except that <strong>XOR</strong>(T, T)=F instead of how <strong>OR</strong>(T, T) = T. It turns out that there are a couple of ways to build <strong>XOR</strong>,</p>
<ul>
<li><strong>AND</strong>(<strong>OR</strong>(<em>x</em>, <em>y</em>), <strong>OR</strong>(<strong>NOT</strong>(<em>x</em>), <strong>NOT</strong>(<em>y</em>))) is one definition of <strong>XOR</strong>(<em>x</em>, <em>y</em>)</li>
<li><strong>OR</strong>(<strong>AND</strong>(<em>x</em>, <strong>NOT</strong>(<em>y</em>)), <strong>AND</strong>(<strong>NOT</strong>(<em>x</em>), <em>y</em>)) is another equivalent definition of <strong>XOR</strong>(<em>x</em>, <em>y</em>).</li>
</ul>
<p>I’d call this equivalence another law.</p>
<p>Here are some questions:</p>
<ol>
<li><strong>Troolean logic</strong>. Let’s say we extend Boolean logic to have a third value ? meaning “I don’t know.” So we should define <strong>NOT</strong>(?)=?, as well as <strong>OR</strong>(F, ?) = ? and <strong>OR</strong>(T, ?) = T since in the first case we can’t tell what the result of OR should be, but in the second it should definitely return T. Show that we can define <strong>AND</strong> and <strong>XOR</strong> on all pairs of inputs involving T, F, and ? so that all of the laws above hold.</li>
<li><strong>Quadroolean logic</strong>. Instead, we could extend Boolean logic to have 4 values: F, T, VF and VT, where VF is “very false” and VT is “very true.” Thus <strong>NOT</strong>(VF)=VT and <strong>NOT</strong>(VT)=VF makes a sensical definition, as well as <strong>OR</strong>(VF, <em>x</em>) = <em>x</em> for all <em>x</em> and <strong>OR</strong>(VT, <em>x</em>) = VT for all <em>x</em>. Show that we can define <strong>AND</strong> and <strong>XOR</strong> on all pairs of inputs involving T, F, VT and VF so that all of the laws above hold.</li>
<li><em><strong>n-</strong></em><strong>oolean logic</strong>. Show that for any integer <em>n </em>&gt; 1, we can come up with a set of exactly <em>n</em> symbols including T and F, and definitions of <strong>NOT</strong>, <strong>AND</strong>, <strong>OR</strong> and <strong>XOR</strong> for them so that all of the laws above hold, plus a few others: <strong>NOT</strong>(<strong>NOT</strong>(<em>x</em>)) = <em>x</em>; the commutative property <strong>AND</strong>(<em>x</em>, <em>y</em>)=<strong>AND</strong>(<em>y</em>, <em>x</em>) and similarly for <strong>OR</strong>; the associative property <strong>AND</strong>(<em>x</em>, <strong>AND</strong>(<em>y</em>, <em>z</em>)) = <strong>AND</strong>(<strong>AND</strong>(<em>x</em>, <em>y</em>), <em>z</em>) and similarly for <strong>OR</strong>; the idempotent laws <strong>OR</strong>(<em>x</em>, <em>x</em>) = <strong>AND</strong>(<em>x</em>, <em>x</em>) = <em>x</em>.</li>
<li>Are there multiple truly different <em>n</em>-oolean logics?</li>
<li>Does the XOR equivalence law follow automatically from all of the other laws? (This one I don’t know the answer to.)</li>
</ol></div></content><updated planet:format="December 14, 2012 10:48 PM">2012-12-14T22:48:54Z</updated><published planet:format="December 14, 2012 10:48 PM">2012-12-14T22:48:54Z</published><category term="computer science"/><category term="puzzlers"/><category term="toc"/><author><name>daveagp</name></author><source><id>https://daveagp.wordpress.com</id><logo>https://secure.gravatar.com/blavatar/0c75bc2d5e38ccd4ac9254b60147fa59?s=96&amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fbuttonw-com.png</logo><link href="https://daveagp.wordpress.com/category/toc/feed/" rel="self" type="application/atom+xml"/><link href="https://daveagp.wordpress.com" rel="alternate" type="text/html"/><link href="https://daveagp.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/><link href="https://daveagp.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/><subtitle>Dave Pritchard's algorithms, recipes, etc</subtitle><title>toc – QED and NOM</title><updated planet:format="February 28, 2020 03:25 AM">2020-02-28T03:25:03Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;79f34b0cad62e6ab702c90039e1d5e19&quot;</planet:http_etag><planet:http_last_modified>Fri, 28 Feb 2020 03:28:38 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>david-pritchard</planet:css-id><planet:face>pritchard.jpeg</planet:face><planet:name>David Pritchard</planet:name><planet:http_location>https://daveagp.wordpress.com/category/toc/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>