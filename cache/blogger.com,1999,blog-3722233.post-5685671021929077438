<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-3722233.post-5685671021929077438</id><link href="https://blog.computationalcomplexity.org/2018/11/p-np-need-not-give-sat-algorithm.html" rel="alternate" type="text/html"/><title>P = NP Need Not Give a SAT Algorithm</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In <a href="https://blog.computationalcomplexity.org/2018/10/if-pnp-then-we-have-alg-for-sat.html">Bill's post</a> earlier this week, he asks if there is a fixed algorithm such that if P = NP, this algorithm will correctly compute satisfiability on all inputs. While I believe this statement is true because P ≠ NP, I would like to argue we won't prove it anytime soon.<br/>
<br/>
Bill links to a TCS Stack Exchange <a href="https://cstheory.stackexchange.com/a/41753/550">answer</a> by Marzio De Biasi giving a fixed algorithm that would get SAT correct except on a finite number of inputs if P = NP. Here is Marzio's algorithm.<br/>
<br/>
<pre><code>Input: x   (boolean formula)
Find the minimum i such that
  1) |M_i| &lt; log(log(|x|))  [ M_1,M_2,... is a standard fixed TM enumeration] 
  2) and  M_i solves SAT correctly 
       on all formulas |y| &lt; log(log(|x|))
          halting in no more than |y|^|M_i| steps
          [ checkable in polynomial time w.r.t. |x| ]
  if such i exists simulate M_i on input x 
      until it stops and accept/reject according to its output
      or until it reaches 2^|x| steps and in this case reject;
  if such i doesn't exist loop for 2^|x| steps and reject.</code></pre>
<br/>
This proof relativizes: There is a fixed relativizing Turing machine M such that for all A, if P<sup>A</sup> = NP<sup>A</sup> then L(M<sup>A</sup>) runs in polynomial time and differs from SAT<sup>A</sup> on only a finite number of strings. SAT<sup>A</sup> is a relativizable form of SAT with a built in relations that answer whether a sequence of variables encode an string in A. SAT<sup>A</sup> is NP<sup>A</sup>-complete for all A.<br/>
<br/>
The following shows any proof that a fixed algorithm can compute all of SAT correctly if P = NP cannot relativize.<br/>
<br/>
<b>Theorem: </b>For every deterministic Turing machine M, there is an A such that P<sup>A</sup> = NP<sup>A</sup> and either M<sup>A </sup>does not compute SAT<sup>A</sup> correctly on all inputs or M<sup>A </sup>takes at least exponential time.<br/>
<br/>
<b>Proof:</b><br/>
<br/>
Define B = {0x | x in TQBF}. TQBF is the PSPACE-complete problem containing all the true quantified Boolean formula. P<sup>TQBF</sup> = PSPACE = NP<sup>TQBF</sup> and thus P<sup>B</sup> = NP<sup>B</sup>. 
<br/>
<br/>
Let φ<sub>n</sub> be the formula that is true if there exists a string z of length n such that 1z is in A. Let n be the smallest n such that M<sup>B</sup>(φ<sub>n</sub>) takes less than 2<sup>n</sup> computational steps. If no such n exists let A = B and we are done.
<br/>
<br/>
If M<sup>B</sup>(φ<sub>n</sub>) accepts we are done by letting A=B since B has no string beginning with 1.
<br/>
<br/>
If M<sup>B</sup>(φ<sub>n</sub>) rejects and uses less than 2<sup>n</sup> steps there must be some z such that M<sup>B</sup>(φ<sub>n</sub>) did not query 1z. Let A = B ∪ {1z}.<br/>
<br/>
M<sup>A</sup>(φ<sub>n</sub>) still rejects but now φ<sub>n</sub> is in SAT<sup>A</sup>. Also P<sup>A</sup> = NP<sup>A</sup> since adding a single string to an oracle won't affect whether two classes collapse.</div><div class="commentbar"><p/></div></summary><updated planet:format="November 01, 2018 10:33 AM">2018-11-01T10:33:00Z</updated><published planet:format="November 01, 2018 10:33 AM">2018-11-01T10:33:00Z</published><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><source><id>tag:blogger.com,1999:blog-3722233</id><category term="typecast"/><category term="focs metacomments"/><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/><link href="https://blog.computationalcomplexity.org/feeds/posts/default?alt=rss" rel="self" type="application/atom+xml"/><subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle><title>Computational Complexity</title><updated planet:format="December 17, 2018 01:56 AM">2018-12-17T01:56:56Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;3c48828af0b9b548c409eba7b894fc342a0679ccd23a3f1db96c1212435d64c9&quot;</planet:http_etag><planet:http_last_modified>Sun, 16 Dec 2018 21:24:54 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>computational-complexity</planet:css-id><planet:face>gasarch.png</planet:face><planet:name>Computational Complexity</planet:name><planet:http_status>200</planet:http_status></source></entry>
