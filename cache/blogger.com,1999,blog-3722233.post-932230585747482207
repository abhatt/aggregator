<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-3722233.post-932230585747482207</id><link href="https://blog.computationalcomplexity.org/2018/10/good-results-made-meaningless.html" rel="alternate" type="text/html"/><title>Good Results Made Meaningless</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Sometimes you see a beautiful theorem A that you love to talk about. Then another beautiful theorem B comes around, making the first one meaningless since B trivially implies A. Not just a mere extension of A but B had a completely different proof of something much stronger. People will forget all about A--why bother when you have B? Too bad because A was such a nice breakthrough in its time.<br/>
<br/>
Let me give two examples.<br/>
<br/>
In STOC 1995 Nisan and Ta-Shma showed that <a href="https://doi.org/10.1145/225058.225101">Symmetric logspace is closed under complement</a>. Their proof worked quite differently from the 1988 Immerman-Szelepcsenyi <a href="https://blog.computationalcomplexity.org/2003/06/foundations-of-complexity-lesson-19.html">nondeterministic logpsace closed under complement</a> construction. Nisan and Ta-Shma created monotone circuits out of undirected graphs and used these monotone circuits to create sorting networks to count the number of connected components of the graph.<br/>
<br/>
Ten years later Omer Reingold <a href="https://blog.computationalcomplexity.org/2014/02/favorite-theorems-connecting-in-log.html">showed</a> that symmetric logspace was the same as deterministic logspace making the Nisan-Ta-Shma result an trivial corollary. Reingold's proof used walks on expander graphs and the Nisan-Ta-Shma construction was lost to history.<br/>
<br/>
In the late 80's we had several randomized algorithms for testing primality but they didn't usually give a proof that the number was prime. A nice result of Goldwasser and Kilian gave a way to <a href="https://doi.org/10.1145/12130.12162">randomly generate certified primes</a>, primes with proofs of primeness. Adleman and Huang <a href="https://doi.org/10.1145/28395.28445">later showed</a> that one can randomly find a proof of primeness for any prime.<br/>
<br/>
In 2002, Agrawal, Kayal and Saxena showed <a href="https://www.jstor.org/stable/3597229">Primes in P</a>, i.e., primes no longer needed a proof of primeness. As Joe Kilian said to me at the time, &quot;there goes my best chance at a Gödel Prize&quot;.</div><div class="commentbar"><p/></div></summary><updated planet:format="October 25, 2018 11:24 AM">2018-10-25T11:24:00Z</updated><published planet:format="October 25, 2018 11:24 AM">2018-10-25T11:24:00Z</published><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><source><id>tag:blogger.com,1999:blog-3722233</id><category term="typecast"/><category term="focs metacomments"/><author><name>Lance Fortnow</name><email>noreply@blogger.com</email></author><link href="https://blog.computationalcomplexity.org/" rel="alternate" type="text/html"/><link href="https://blog.computationalcomplexity.org/feeds/posts/default?alt=rss" rel="self" type="application/atom+xml"/><subtitle>Computational Complexity and other fun stuff in math and computer science from Lance Fortnow and Bill Gasarch</subtitle><title>Computational Complexity</title><updated planet:format="December 17, 2018 01:56 AM">2018-12-17T01:56:55Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;3c48828af0b9b548c409eba7b894fc342a0679ccd23a3f1db96c1212435d64c9&quot;</planet:http_etag><planet:http_last_modified>Sun, 16 Dec 2018 21:24:54 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>computational-complexity</planet:css-id><planet:face>gasarch.png</planet:face><planet:name>Computational Complexity</planet:name><planet:http_status>200</planet:http_status></source></entry>
