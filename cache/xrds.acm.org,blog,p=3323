<?xml version="1.0" encoding="utf-8"?><entry xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://xrds.acm.org/blog/?p=3323</id><link href="https://blog.xrds.acm.org/2017/12/flex-lexical-analysis/" rel="alternate" type="text/html"/><title>Flex, Regular Expressions, and Lexical Analysis</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p> What Makes a Programming Language? There is an alphabet, words, grammar, statements, semantics, and various ways to organize the previous in order to create a computer program in a programming language. Flex helps developers create a tool called a lexical … <a href="https://blog.xrds.acm.org/2017/12/flex-lexical-analysis/">Continue reading <span class="meta-nav">→</span></a></p>
<p>The post <a href="https://blog.xrds.acm.org/2017/12/flex-lexical-analysis/" rel="nofollow">Flex, Regular Expressions, and Lexical Analysis</a> appeared first on <a href="https://blog.xrds.acm.org" rel="nofollow">XRDS</a>.</p></div><div class="commentbar"><p/></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h2> What Makes a Programming Language?</h2>
<p>There is an alphabet, words, grammar, statements, semantics, and various ways to organize the previous in order to create a computer program in a programming language. Flex helps developers create a tool called a lexical analyzer which identifies the words of a program during the compilation/interpretation process.</p>
<p><span id="more-3323"/></p>
<p>A compiler takes a text file and parses it by character trying to match patterns at each of the aforementioned levels. The initial parse is the lexical analysis, this pass ensures that there are no lexical errors, which are characters that don’t contribute to meaningful words.</p>
<p>Meaningful words for a programming language are described by a regular language. An implementation for describing a regular language is regular expressions. An implementation for parsing text while looking for matches to regular expressions is a flex lexical analyzer.</p>
<p>Essentially, programming a flex lexer means defining various regular expressions which detail all of the possible words and characters that are meaningful in a correct program for your language.</p>
<h2>BooleanLogicLanguage Example Language</h2>
<p>To illustrate flex, BooleanLogicLanguage is an example language which a flex-based lexer will lexically analyze. For no reason in particular, the purpose of this language is to evaluate Boolean logic expressions.</p>
<div class="wp-caption alignnone" id="attachment_3325" style="width: 310px;"><a href="http://xrds.acm.org/blog/wp-content/uploads/2017/11/scan0010.jpg" rel="attachment wp-att-3325"><img alt="An example of a program made in BooleanLogicLanguage" class="size-medium wp-image-3325" height="142" src="http://xrds.acm.org/blog/wp-content/uploads/2017/11/scan0010-300x142.jpg" width="300"/></a><p class="wp-caption-text">An example of a program made in BooleanLogicLanguage</p></div>
<p>This diagram is an example of what a correct program would look like in this BooleanLogicLanguage. The lexical analyzer should be able to parse this without errors. Note that in this language, ‘INTEGER(‘ and ‘INTEGER)’ are the ‘words’ used to separate pieces of code — as opposed to ‘(‘, ‘)’, ‘{‘, or ‘}’. When creating your own language, you are free to do whatever you want, but following convention, to some degree, just ensures that the tool you are creating is easy to use.</p>
<p>NOTE: A programming language is a tool for using a computer. A GUI is a tool for using a computer. Siri or Cortana are tools for using a computer, etc.</p>
<div class="wp-caption alignnone" id="attachment_3324" style="width: 220px;"><a href="http://xrds.acm.org/blog/wp-content/uploads/2017/11/scan0008.jpg" rel="attachment wp-att-3324"><img alt="Regular expressions describing the lexical structure of BooleanLogicLanguage" class="size-medium wp-image-3324" height="300" src="http://xrds.acm.org/blog/wp-content/uploads/2017/11/scan0008-210x300.jpg" width="210"/></a><p class="wp-caption-text">Regular expressions describing the lexical structure of BooleanLogicLanguage</p></div>
<p>This diagram is a sketch of the regular expressions which will be used in the flex program in order to describe meaningful words. The phrases on the left hand side are token names. Token names are not necessarily important during lexical analysis, but they are of the utmost importance when performing the syntactic analysis (which comes after a lexical analysis during compilation/interpretation — not covered in this post).</p>
<p>The most difficult part of this process is defining tokens and figuring out what sort of regular expression should describe them. For this example, I decided to make a language that would evaluate Boolean logic. Then I started writing potential programs in this language, and once I wrote enough that looked interesting and useful, I defined tokens and regular expressions to ensure those particular programs would be correct. I made code up that I liked and then fit tokens and regex to make them work.</p>
<p><strong>A Quick Note on Regular Expressions (Regex)</strong></p>
<p>[…] denotes a single thing, whose identity is dictated by what’s inside the brackets.</p>
<p>A single character is a single thing.</p>
<p>* denotes zero or more of the single thing before it.</p>
<p>? denotes one or zero of the single thing before it.</p>
<p>(…) is just a grouping, usually used with * or ?.</p>
<p>The difference between […] and (…) is that the square brackets represents one of what is inside of it and the parentheses are a grouping. For example [abc] and (abc): ‘a’, ‘b’, ‘c’ all match the former, and ‘abc’ matches the latter.</p>
<p>– denotes a range and has specific applications that are very useful: A-Z, a-z, 0-9.</p>
<h2>Flex</h2>
<p>Flex is like a C program, except it has a  further defined layout.</p>
<p>%{</p>
<p>C code declarations</p>
<p>%}</p>
<p>definitions of regular expressions</p>
<p>%%</p>
<p>regular expression1   code to execute on match (such as a macro)</p>
<p>regular expression2  other code to execute on match (such as a function)</p>
<p>%%</p>
<p>C code functions</p>
<p>main function</p>
<p>The power of Flex comes from being able to define regular expressions (between ‘%}’ and ‘%%’) and then attach them to code (between ‘%%’ and ‘%%’). The additional areas for C code are both handy and what gives the lexer its true functionality (doing something when a regex is matched).</p>
<p>NOTE: flex essentially turns this flex file (extension ‘.l’) into a C program which is then compiled like you would compile any C program. The result is an object-file/program which you execute on/with a text file containing programming code. And in this case, the output of the program is to a text file (Tokens.txt) and also to stdout (terminal).</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<table style="height: 1437px;" width="578">
<tbody>
<tr>
<td>
<pre style="margin: 0; line-height: 125%;"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88</pre>
</td>
<td>
<pre style="margin: 0; line-height: 125%;">%{
<span style="font-weight: bold;">int</span> numErrors = 0;
<span style="font-weight: bold;">char</span>* arg;
<span style="font-weight: bold;">typedef</span> <span style="font-weight: bold;">struct</span> node {
	<span style="font-weight: bold;">char</span>* lexeme;
	<span style="font-weight: bold;">char</span>* token;
	<span style="font-weight: bold;">struct</span> node* next;
} <span style="font-weight: bold;">node_t</span>;
<span style="font-weight: bold;">node_t</span> head;
<span style="font-weight: bold;">node_t</span>* current = &amp;head;
<span style="font-weight: bold;">int</span> yywrap(<span style="font-weight: bold;">void</span>);
<span style="font-weight: bold;">void</span> store(<span style="font-weight: bold;">char</span>* lexeme);
<span style="font-weight: bold;">void</span> error(<span style="font-weight: bold;">void</span>);
<span style="font-weight: bold;">void</span> printStored(<span style="font-weight: bold;">void</span>);
%}
whitespace		(<span>\</span>t|<span style="font-style: italic;">&quot; &quot;</span>|<span>\</span>r)
newline			<span>\</span>n
real 			-?[0-9]+<span>\</span>.[0-9]+
integer			-?[0-9]+
string			<span>\</span><span style="font-style: italic;">&quot;.*</span><span style="font-weight: bold; font-style: italic;">\&quot;</span>
boolean_op_binary	(<span style="font-style: italic;">&quot; AND &quot;</span>|<span style="font-style: italic;">&quot; OR &quot;</span>|<span style="font-style: italic;">&quot; XOR &quot;</span>)
boolean_op_unary	<span style="font-style: italic;">&quot;NOT &quot;</span>
boolean_literal		(<span style="font-style: italic;">&quot;True&quot;</span>|<span style="font-style: italic;">&quot;False&quot;</span>)
identifier		[A-Z]+
separator_open		({real}|{integer})<span>\</span>(
separator_close		<span>\</span>)({real}|{integer})
assignment		=
IO			<span style="font-style: italic;">&quot;print &quot;</span>
terminal		;
%%
{whitespace}				{ECHO;}
{newline}				{ECHO;}
{real}					{ECHO;}
{integer}				{ECHO;}
{string}				{ECHO;}
{boolean_op_binary}			{ECHO; arg = <span style="font-style: italic;">&quot;BOOL_OP_BINARY&quot;</span>; store(yytext);}
{boolean_op_unary}			{ECHO; arg = <span style="font-style: italic;">&quot;BOOL_OP_UNARY&quot;</span>; store(yytext);}
{boolean_literal}			{ECHO; arg = <span style="font-style: italic;">&quot;BOOL_LITERAL&quot;</span>; store(yytext);}
{identifier}				{ECHO; arg = <span style="font-style: italic;">&quot;IDENTIFIER&quot;</span>; store(yytext);}
{separator_open}			{ECHO; arg = <span style="font-style: italic;">&quot;OPEN&quot;</span>; store(yytext);}
{separator_close}			{ECHO; arg = <span style="font-style: italic;">&quot;CLOSE&quot;</span>; store(yytext);}
{assignment}				{ECHO; arg = <span style="font-style: italic;">&quot;ASSIGN&quot;</span>; store(yytext);}
{IO}					{ECHO; arg = <span style="font-style: italic;">&quot;IO&quot;</span>; store(yytext);}
{terminal}				{ECHO; arg = <span style="font-style: italic;">&quot;TERMINAL&quot;</span>; store(yytext);}
.					{ECHO; numErrors++; error();}
%%
<span style="font-weight: bold;">int</span> yywrap(<span style="font-weight: bold;">void</span>) {
	<span style="font-weight: bold;">return</span> 1;
}
<span style="font-weight: bold;">void</span> store(<span style="font-weight: bold;">char</span>* lexeme) {
	current-&gt;lexeme = malloc(<span style="font-weight: bold;">sizeof</span>(strlen(lexeme)+1));
	strcpy(current-&gt;lexeme,lexeme);
	current-&gt;token = malloc(<span style="font-weight: bold;">sizeof</span>(strlen(arg)+1));
	strcpy(current-&gt;token,arg);
	<span style="font-weight: bold;">node_t</span>* temp;
	temp = malloc(<span style="font-weight: bold;">sizeof</span>(<span style="font-weight: bold;">node_t</span>));
	current-&gt;next = temp;
	current = current-&gt;next;
}
<span style="font-weight: bold;">void</span> error(<span style="font-weight: bold;">void</span>) {
	printf(<span style="font-style: italic;">&quot;[e]&quot;</span>);
}
<span style="font-weight: bold;">void</span> printStored(<span style="font-weight: bold;">void</span>) {
	<span style="font-weight: bold;">node_t</span>* c = &amp;head;
	<span style="font-weight: bold;">FILE</span>* f = fopen(<span style="font-style: italic;">&quot;Tokens.txt&quot;</span>,<span style="font-style: italic;">&quot;w&quot;</span>);

	<span style="font-weight: bold;">while</span> (c-&gt;next) {
		fprintf(f,<span style="font-style: italic;">&quot;%s</span><span style="font-weight: bold; font-style: italic;">\t</span><span style="font-style: italic;">%s</span><span style="font-weight: bold; font-style: italic;">\n</span><span style="font-style: italic;">&quot;</span>,c-&gt;lexeme,c-&gt;token);
		c = c-&gt;next;
	}
	fclose(f);
	printf(<span style="font-style: italic;">&quot;Tokens.txt written.</span><span style="font-weight: bold; font-style: italic;">\n</span><span style="font-style: italic;">&quot;</span>);
}
<span style="font-weight: bold;">int</span> main(<span style="font-weight: bold;">int</span> argc, <span style="font-weight: bold;">char</span> *argv[]) {
	<span style="font-style: italic;">// ensures number of command line arguments</span>
	<span style="font-weight: bold;">if</span> (argc != 2) {
		printf(<span style="font-style: italic;">&quot;Please enter one filename as an argument.</span><span style="font-weight: bold; font-style: italic;">\n</span><span style="font-style: italic;">&quot;</span>);
		<span style="font-weight: bold;">return</span> -1;
	}
	<span style="font-style: italic;">// opens the file with name of second argument</span>
	yyin = fopen(argv[1],<span style="font-style: italic;">&quot;r&quot;</span>);
	yylex();
	<span style="font-style: italic;">// close file</span>
	fclose(yyin);
	printf(<span style="font-style: italic;">&quot;</span><span style="font-weight: bold; font-style: italic;">\n</span><span style="font-style: italic;">LexicalErrors %d</span><span style="font-weight: bold; font-style: italic;">\n</span><span style="font-style: italic;">&quot;</span>,numErrors);
	printStored();
	<span style="font-weight: bold;">return</span> 0;
}</pre>
</td>
</tr>
</tbody>
</table>
</div>
<p><!-- HTML generated using hilite.me -->The above code is a flex file which parses the BooleanLogicLanguage.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<table>
<tbody>
<tr>
<td>
<pre style="margin: 0; line-height: 125%;">1
2
3
4
5
6
7
8
9</pre>
</td>
<td>
<pre style="margin: 0; line-height: 125%;">CC=gcc
CFLAGS=
LexerFile=lexer

lexer: lex.yy.c
	<span style="font-weight: bold;">$(</span>CC<span style="font-weight: bold;">)</span> <span style="font-weight: bold;">$(</span>CCFLAGS<span style="font-weight: bold;">)</span> -o lexer lex.yy.c

lex.yy.c: <span style="font-weight: bold;">$(</span>LexerFile<span style="font-weight: bold;">)</span>.l
	flex <span style="font-weight: bold;">$(</span>LexerFile<span style="font-weight: bold;">)</span>.l</pre>
</td>
</tr>
</tbody>
</table>
</div>
<p>The above code is a makefile, which when run in the same directory as the flex file, will create the ‘lexer’ program. This was tested on an Ubuntu 16.04 operating system. The GNU C Compiler (gcc) is required in addition to flex.<!-- HTML generated using hilite.me --></p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<table>
<tbody>
<tr>
<td>
<pre style="margin: 0; line-height: 125%;">1
2
3
4
5</pre>
</td>
<td>
<pre style="margin: 0; line-height: 125%;">P = True;
R = False;

Q = 1(NOT P)1 XOR 2(P AND 3(NOT R)3)2;
print Q;
</pre>
</td>
</tr>
</tbody>
</table>
</div>
<p>The above text should be parsed without errors by our lexer. And the lexer should output a Tokens.txt matching each lexeme to the token describing its regex.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<table>
<tbody>
<tr>
<td>
<pre style="margin: 0; line-height: 125%;"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre>
</td>
<td>
<pre style="margin: 0; line-height: 125%;">P	IDENTIFIER
=	ASSIGN
True	BOOL_LITERAL
;	TERMINAL
R	IDENTIFIER
=	ASSIGN
False	BOOL_LITERAL
;	TERMINAL
Q	IDENTIFIER
=	ASSIGN
1(	OPEN
NOT 	BOOL_OP_UNARY
P	IDENTIFIER
)1	CLOSE
 XOR 	BOOL_OP_BINARY
2(	OPEN
P	IDENTIFIER
 AND 	BOOL_OP_BINARY
3(	OPEN
NOT 	BOOL_OP_UNARY
R	IDENTIFIER
)3	CLOSE
)2	CLOSE
;	TERMINAL
print 	IO
Q	IDENTIFIER
;	TERMINAL
</pre>
</td>
</tr>
</tbody>
</table>
</div>
<p>Here is the Token.txt for that initial errorless program.</p>
<p/><div class="wp-caption alignnone" id="attachment_3356" style="width: 310px;"><a href="http://xrds.acm.org/blog/wp-content/uploads/2017/12/Screen-Shot-2017-12-10-at-5.19.44-PM.png" rel="attachment wp-att-3356"><img alt="Lexical errors are designated with a '[e]' for this lexer." class="size-medium wp-image-3356" height="97" src="http://xrds.acm.org/blog/wp-content/uploads/2017/12/Screen-Shot-2017-12-10-at-5.19.44-PM-300x97.png" width="300"/></a><p class="wp-caption-text">Lexical errors are designated with a ‘[e]’ for this lexer, and it comes jsut after the erroneous character.</p></div>The above is a screenshot of an example of parsing a program with lexical errors.<p/>
<p><strong>What is Next?</strong></p>
<p>Classically, once you can identify words, including what type of word (token), you can then create a grammar. You could think of a token as ‘noun’ or ‘verb’ or ‘adjective’, if comparing a programming language to a natural language. The step after lexical analysis (checking for correctness of words) is syntactic analysis (checking for correctness of grammar). Making a comparison to natural languages again, an English grammar could be PHRASE: article noun verb (The dog ran, A bird flies, etc). In BooleanLogicLanguage there could be STATEMENT: IDENTIFIER ASSIGN BOOL_LITERAL (Q = True, A = False, etc). But each of those are an example of just one type of phrase or statement, you can have multiple definitions for a production in the grammar for your language.</p>
<p>Non-Classically? I don’t know. Natural Language Processing (NLP) is a very active area, but I’m not aware of anyone using those techniques for parsing textual programming languages.</p>
<p>The post <a href="https://blog.xrds.acm.org/2017/12/flex-lexical-analysis/" rel="nofollow">Flex, Regular Expressions, and Lexical Analysis</a> appeared first on <a href="https://blog.xrds.acm.org" rel="nofollow">XRDS</a>.</p></div></content><updated planet:format="December 10, 2017 11:44 PM">2017-12-10T23:44:11Z</updated><published planet:format="December 10, 2017 11:44 PM">2017-12-10T23:44:11Z</published><category term="Programming Languages"/><category term="Theory"/><category term="Uncategorized"/><category term="flex"/><category term="lexer"/><category term="lexical analysis"/><category term="Linux"/><author><name>Alexander DeForge</name></author><source><id>https://blog.xrds.acm.org</id><link href="https://blog.xrds.acm.org/tag/theory/feed/" rel="self" type="application/atom+xml"/><link href="https://blog.xrds.acm.org" rel="alternate" type="text/html"/><subtitle>Crossroads - The ACM Magazine for Students</subtitle><title>Theory – XRDS</title><updated planet:format="December 16, 2018 04:43 PM">2018-12-16T16:43:41Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>&quot;ce816ac0eb47d36445e6791dee738bc7&quot;</planet:http_etag><planet:http_last_modified>Fri, 09 Nov 2018 09:28:27 GMT</planet:http_last_modified><planet:bozo>true</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>acm-crossroads-student-magazine</planet:css-id><planet:face>xrds.jpeg</planet:face><planet:name>ACM Crossroads student magazine</planet:name><planet:http_location>https://blog.xrds.acm.org/tag/theory/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>
