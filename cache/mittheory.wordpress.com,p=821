<?xml version="1.0" ?><entry xml:lang="en" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://mittheory.wordpress.com/?p=821</id><link href="https://mittheory.wordpress.com/2016/10/03/estimating-transitive-closure/" rel="alternate" type="text/html"/><title>Estimating Transitive Closure via Sampling</title><summary>In this post, I describe an algorithm of Edith Cohen, which estimates the size of the transitive closure of a given directed graph in near-linear time. This simple, but extremely clever algorithm uses ideas somewhat similar to the algorithm of Flajolet–Martin for estimating the number of distinct elements in a stream, and to MinHash sketch […]</summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In this post, I describe an <a href="http://cohenwang.com/edith/Papers/tcest.pdf">algorithm</a> of <a href="http://www.cohenwang.com/edith/">Edith Cohen</a>, which estimates the size of the <a href="http://www.geeksforgeeks.org/transitive-closure-of-a-graph/">transitive closure</a> of a given directed graph in near-linear time. This simple, but extremely clever algorithm uses ideas somewhat similar to the <a href="https://en.wikipedia.org/wiki/Flajolet%E2%80%93Martin_algorithm">algorithm</a> of Flajolet–Martin for estimating the number of distinct elements in a stream, and to <a href="https://en.wikipedia.org/wiki/MinHash">MinHash</a> sketch of Broder<sup>1</sup>.</p>
<p>Suppose we have a large directed graph with <img alt="n" class="latex" src="https://s0.wp.com/latex.php?latex=n&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="n"/> vertices and <img alt="m" class="latex" src="https://s0.wp.com/latex.php?latex=m&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="m"/> directed edges. For a vertex <img alt="v" class="latex" src="https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="v"/>, let us denote <img alt="R_v" class="latex" src="https://s0.wp.com/latex.php?latex=R_v&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="R_v"/> the set of vertices that are <em>reachable</em> from <img alt="v" class="latex" src="https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="v"/>. There are two known ways to compute sets <img alt="R_v" class="latex" src="https://s0.wp.com/latex.php?latex=R_v&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="R_v"/> (all at the same time):</p>
<ul>
<li>Perform <a href="https://en.wikipedia.org/wiki/Depth-first_search">Depth-First Search</a> (DFS) from each vertex. This takes time <img alt="O(nm)" class="latex" src="https://s0.wp.com/latex.php?latex=O%28nm%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="O(nm)"/>, which is the best known bound for <em>sparse</em> graphs;</li>
<li>Use <a href="https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms">fast matrix multiplication</a>, which takes time <img alt="O(n^{2.37\ldots})" class="latex" src="https://s0.wp.com/latex.php?latex=O%28n%5E%7B2.37%5Cldots%7D%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="O(n^{2.37\ldots})"/>. This algorithm is better for <em>dense</em> graphs.</li>
</ul>
<p>Can we do better? Turns out we can, if we are OK with merely <em>approximating the size</em> of every <img alt="R_v" class="latex" src="https://s0.wp.com/latex.php?latex=R_v&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="R_v"/>. Namely, the following theorem was <a href="http://ieeexplore.ieee.org/document/365694/">proved</a> back in 1994:</p>
<p><strong>Theorem 1.</strong> There exists a randomized algorithm for computing <img alt="(1 + \varepsilon)" class="latex" src="https://s0.wp.com/latex.php?latex=%281+%2B+%5Cvarepsilon%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="(1 + \varepsilon)"/>-multiplicative approximation for every <img alt="|R_v|" class="latex" src="https://s0.wp.com/latex.php?latex=%7CR_v%7C&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="|R_v|"/> with running time <img alt="\varepsilon^{-2}\cdot m \cdot \mathrm{poly}(\log n)" class="latex" src="https://s0.wp.com/latex.php?latex=%5Cvarepsilon%5E%7B-2%7D%5Ccdot+m+%5Ccdot+%5Cmathrm%7Bpoly%7D%28%5Clog+n%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="\varepsilon^{-2}\cdot m \cdot \mathrm{poly}(\log n)"/>.</p>
<p>Instead of spelling out the full proof, I will present it as a sequence of <em>problems</em>: each of them will likely be doable for a mathematically mature reader. Going through the problems should be fun, and besides, it will save me some typing.</p>
<p><strong>Problem 1.</strong> Let <img alt="f \colon V \to [0, 1]" class="latex" src="https://s0.wp.com/latex.php?latex=f+%5Ccolon+V+%5Cto+%5B0%2C+1%5D&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="f \colon V \to [0, 1]"/> be a function that assigns random independent and uniform reals between 0 and 1 to every vertex. Let us define <img alt="g(v) = \min_{w \in R_v} f(w)" class="latex" src="https://s0.wp.com/latex.php?latex=g%28v%29+%3D+%5Cmin_%7Bw+%5Cin+R_v%7D+f%28w%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="g(v) = \min_{w \in R_v} f(w)"/>. Show how to compute values of <img alt="g(v)" class="latex" src="https://s0.wp.com/latex.php?latex=g%28v%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="g(v)"/> <em>for all vertices </em> <img alt="v" class="latex" src="https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="v"/> <em>at once</em> in time <img alt="m \cdot \mathrm{poly}(\log n)" class="latex" src="https://s0.wp.com/latex.php?latex=m+%5Ccdot+%5Cmathrm%7Bpoly%7D%28%5Clog+n%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="m \cdot \mathrm{poly}(\log n)"/>.</p>
<p><strong>Problem 2. </strong>For a positive integer <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="k"/>, denote <img alt="U_k" class="latex" src="https://s0.wp.com/latex.php?latex=U_k&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="U_k"/> the distribution of the minimum of <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="k"/> independent and uniform reals between 0 and 1. Suppose we receive several independent samples from <img alt="U_k" class="latex" src="https://s0.wp.com/latex.php?latex=U_k&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="U_k"/> with an unknown value of <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="k"/>. Show that we <a href="https://en.wikipedia.org/wiki/Median">can obtain</a> a <img alt="(1 + \varepsilon)" class="latex" src="https://s0.wp.com/latex.php?latex=%281+%2B+%5Cvarepsilon%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="(1 + \varepsilon)"/>-multiplicative approximation of <img alt="k" class="latex" src="https://s0.wp.com/latex.php?latex=k&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="k"/> with probability <img alt="1 - \delta" class="latex" src="https://s0.wp.com/latex.php?latex=1+-+%5Cdelta&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="1 - \delta"/> using as few as <img alt="O(\log(1 / \delta) / \varepsilon^2)" class="latex" src="https://s0.wp.com/latex.php?latex=O%28%5Clog%281+%2F+%5Cdelta%29+%2F+%5Cvarepsilon%5E2%29&amp;bg=ffffff&amp;fg=404040&amp;s=0" title="O(\log(1 / \delta) / \varepsilon^2)"/> samples.</p>
<p><strong>Problem 3. </strong>Combine the solutions for two previous problems and prove <strong>Theorem 1</strong>.</p>
<h3>Footnotes</h3>
<ol>
<li>These similarities explain my extreme enthusiasm towards the algorithm. Sketching-based techniques are useful for a problem covered in <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/">6.006</a>, yay!</li>
</ol>
<p>—<a href="https://ilyaraz.org">Ilya</a></p></div></content><updated planet:format="October 04, 2016 03:31 AM">2016-10-04T03:31:58Z</updated><published planet:format="October 04, 2016 03:31 AM">2016-10-04T03:31:58Z</published><category term="algorithms"/><category term="paper reviews"/><author><name>mittheory</name></author><source><id>https://mittheory.wordpress.com</id><logo>https://s0.wp.com/i/buttonw-com.png</logo><link href="https://mittheory.wordpress.com/feed/" rel="self" type="application/atom+xml"/><link href="https://mittheory.wordpress.com" rel="alternate" type="text/html"/><link href="https://mittheory.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/><link href="https://mittheory.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/><subtitle>A student blog of MIT CSAIL Theory of Computation Group</subtitle><title>Not so Great Ideas in Theoretical Computer Science</title><updated planet:format="February 28, 2020 03:25 AM">2020-02-28T03:25:11Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_last_modified>Fri, 06 Sep 2019 10:00:22 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>mit-csail-student-blog</planet:css-id><planet:face>csail.png</planet:face><planet:name>MIT CSAIL student blog</planet:name><planet:http_location>https://mittheory.wordpress.com/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>