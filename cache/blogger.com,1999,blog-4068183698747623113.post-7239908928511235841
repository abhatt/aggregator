<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-4068183698747623113.post-7239908928511235841</id><link href="http://teachingintrotocs.blogspot.com/feeds/7239908928511235841/comments/default" rel="replies" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/2012/05/interview-of-maurice-herlihy.html#comment-form" rel="replies" type="text/html"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/7239908928511235841" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/7239908928511235841" rel="self" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/2012/05/interview-of-maurice-herlihy.html" rel="alternate" type="text/html"/><title>An interview of Maurice Herlihy</title><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Q: You just received the Dijkstra prize for the second time. What did you receive this award for? <br/>A: The Transactional Memory paper. The basic idea is that designing highly concurrent data structures is much too hard and people who work in that area have to focus on too many tricks. Mechanical tricks are too easily confused with essential issues, and that paper was an attempt to make it easier to deal with the mechanics, to allow researchers to focus on the core aspects of synchronization algorithms. <br/>Q: What's the result? <br/>A: Hardware designing. <br/>Q: What do you mean? <br/>A: A way of designing cache coherence protocols to allow the programmer to avoid conventional mechanisms such as locks. You can say what it is that you want to be atomic, without specifying how. It's an implementation of a very simple abstraction. The paper was very concrete, with hardware architecture. <br/>Q: How did it have impact? <br/>A: The paper is from 1993. For the first 10 years, nobody paid any attention to this paper. There was an average of 5 or 6 citations per year. Then in 2004 changes in technology meant that processor clock speeds could no longer improve, so people went to multicore where there is a lot of concurrency, and then they discovered that no one had any idea how to use them. <br/>Q: You make programing multicore machines easier to do and to reason about? <br/>A: It has other software engineering benefits, some performance benefits. The entire story is complicated but big picture is that it makes it much easier to write concurrent programs. <br/>Q: Can you give an example of a concrete impact? <br/>A: The Intel Haswell processor, their next processor, has transactional memory built into it. Intel laptops from now on have a machine that supports transactional memory in a form not much different from the 1993 paper. <br/>Q: Do you have a patent? <br/>A: I do but it's not mine. I gave it to my employer who was DEC. The patent may be expired.  </p><p>Q: What did you think of it when you were doing it? <br/>A: A very nice idea solving an important problem, but I knew no one would care about it. I was convinced that it could become a very important idea, and at the same time I was very surprised when it did. <br/>Q: Do you have any other papers waiting to be discovered? <br/>A: [...] <br/>Q: How did you think about it? <br/>A: It came up in a conversation with Eliot Moss, coauthor on the paper. I was interested in lock-free data structures and he was interested in architecture and we were talking about how difficult it was to do lock free data structures on modern architecture and Eliot asked whether one could use cache coherence protocols to address the problem. <br/>Q: This piece of research was instantaneous? <br/>A: We had been office mates as grad students at MIT before, so we would meet from time to time casually for conversation, so this is an example of why it's a good idea to talk to people from other areas. What made it so unusual at that time was that it was a linkage between concurrent data structures (very high level) and hardware design (very low level). It required a broad CS culture. <br/>Q: What does that say about how to do research? <br/>A: You need to have conversations with people who are not goal directed. Neither one of us working individually would have done this. We knew something about one another's areas but would not have concentrated enough to see this connection.  </p><p>Q: Do you have any opinion of the streaming computational model? <br/>A: It's something that has gone, in a very short time, from ad hoc to methods that are much better founded in theory. <br/>Q: What about MapReduce? <br/>A: It's been enormously successful, but it's very limited in what it can do, and everybody is trying to invent or discover the successor to MapReduce. <br/>Q: Does it mean it's not worth investing a lot of time into it, say, designing algorithms for it? <br/>A: Because MapReduce is so important, any improvement will have immediate impact, but it's something done better as a large company, in industry rather than in the academic world. There 's also a lot of engineering that goes on in this area.  </p><p>Q: How do you go about doing research? <br/>A: I am opportunistic. I have a general area of interest, namely, concurrency, but I worry about becoming too specialized, so I make an effort to balance my attention between more applied and more theoretical areas, because, often, that's where you have the opportunity to write the first &quot;easy&quot; paper and let the ones who write the difficult papers cite your paper.  <br/>Q: So you're a pioneer? <br/>A: Maybe more of a vagabond.  <br/>Q: Are you ever tired of research? <br/>A: No. <br/>Q: Do you do research on vacation? <br/>A: Yes, in my head. <br/>Q: Do you always have some problems you're working on? <br/>A: Yes, usually something that's good for in the shower, or for riding on the metro. <br/>Q: Usually, do you work on several problems at once, or focus on a single one? <br/>A: Usually several small problems at once, because when you get tired of one, then you can turn to the others.  <br/>Q: What are your current interests? <br/>A: Right now, I'm writing a book on combinatorial topology and distributed computing, and I'm also interested in systems aspects of multicore. Since almost nobody is interested in both of these topics, it means that I can talk to twice as many people! <br/>Q: Where are your collaborators? <br/>A: Almost everywhere except at Brown. I'm writing the book with one coauthor in Mexico and the other in Germany. I am visiting several collaborators here in Paris. I work a day a week at Oracle labs in Boston.  </p><p>Q: Distributed computing is not taught much in the undergrad curriculum. What do you think of that state of affairs? <br/>A: I think that that will inevitably change. What will be taught will be multiprocess computing, because soon every computer will be multicore. Today I think that it is a little bit of a scandal that we don't teach parallel computing to our undergrads until late. <br/>Q: Are you familiar with the CLRS textbook on Algorithms? <br/>A: There is a chapter on parallel computing but it's an area that changes rapidly. <br/>Q: So, what about distributed computing? <br/>A: The problem with distributed computing is that there are many models of computation. We're trying to capture many different kinds of phenomena. The culture isn't one where people think standardization is important. Every time someone writes a paper, there is a tendency to use a slightly different model and we're not organized enough as a community to present a coherent story to the world. We're a little like European parliaments, we split into many small groups and argue with each other instead of presenting a unified front. <br/>Q: I take it that that's a criticism? <br/>A: It's an observation. This situation is exactly the reason why I'm writing the book. At present, when you work in this area, you have to read a dozen badly written papers. That presents a large barrier to students and outsiders, and the hope of the book is to present a single coherent story, at a level that's accessible to advanced undergraduates. <br/>Q: When is it coming out? <br/>A: End of this year? <br/>Q: Have people been teaching from drafts of this book? <br/>A: No, people teach from drafts of my other book, a much more applied textbook. <br/>Q: What's your community, the conference where you feel most at home? <br/>A: PODC and DISC, which are basically the same conference but on different continents.   </p><p>Q: What got you interested in distributed computing? <br/>A: As a grad student at MIT, Barbara Liskow had an opening (physical opening: a chair) in one of her offices, so I drifted  into her group. Who you sit next to is perhaps the most important influence in your life. I was floating around looking for a group and the other groups on that floor weren't very friendly, but Barbara was happy to talk to a new student. <br/>Q: Why did you go to MIT? <br/>A: Because I was already living in Cambridge and my girlfriend didn't want to move. <br/>Q: Why did you go to grad school? <br/>A: I got a degree in pure math and I wasn't sure what I wanted to do and at the end of summer after I graduated I needed to start paying rent so I applied at random for jobs.  I had one job offer to teach math at a boys school  in Michigan, one to write Fortran programs for the DOT in Cambridge, then I went from there to working at a research group at the MIT business school, but one day they lost their grant money. They didn't fire me but they fired the guy who did the tape backups and told me I now had to do tape backups, and so I applied to grad school.  </p><p>Q: What's your biggest regret in your career? <br/>A: I think it's being slow on the intake. There are many ideas that turned out to be successful that should have been obvious much sooner.  I could have gone to grad school right away instead of working as a Fortran programmer for 3 years. <br/>Q: That was a waste of time? <br/>A: Not really because, whenever I get frustrated, I remember that time and realize how fortunate I now am.</p></div><div class="commentbar"><p/><span class="commentbutton" href="http://teachingintrotocs.blogspot.com/feeds/7239908928511235841/comments/default"/><a href="http://teachingintrotocs.blogspot.com/feeds/7239908928511235841/comments/default"><img class="commenticon" src="/images/feed-icon.png"/> Subscribe to comments</a><![CDATA[  | ]]><a href="http://teachingintrotocs.blogspot.com/2012/05/interview-of-maurice-herlihy.html#comment-form"><img class="commenticon" src="/images/post-icon.png"/> Post a comment</a></div></content><updated planet:format="May 28, 2012 02:17 PM">2012-05-28T14:17:00Z</updated><published planet:format="May 28, 2012 02:17 PM">2012-05-28T14:17:00Z</published><category scheme="http://www.blogger.com/atom/ns#" term="TCS"/><author><name>Claire Mathieu</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/10957755706440077623</uri></author><source><id>tag:blogger.com,1999:blog-4068183698747623113</id><category term="TCS"/><category term="Oops"/><category term="technology"/><author><name>Claire Mathieu</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/10957755706440077623</uri></author><link href="http://teachingintrotocs.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/-/TCS" rel="self" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/search/label/TCS" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/><title>A CS Professor's blog</title><updated planet:format="August 31, 2018 11:03 AM">2018-08-31T11:03:02Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;8089cd57e1113cac488458ecc6b57d2f5d63c2f2cb0051d1de6e12d23ed12d82&quot;</planet:http_etag><planet:http_last_modified>Fri, 31 Aug 2018 11:03:02 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>claire-mathieu</planet:css-id><planet:face>mathieu.jpeg</planet:face><planet:name>Claire Mathieu</planet:name><planet:filters>category.py?cats=tcs</planet:filters><planet:http_status>200</planet:http_status></source></entry>

