<?xml version="1.0" encoding="utf-8"?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-4068183698747623113.post-4393281650582297469</id><link href="http://teachingintrotocs.blogspot.com/feeds/4393281650582297469/comments/default" rel="replies" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/2011/12/outdegree-contractions-planar-graphs.html#comment-form" rel="replies" type="text/html"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/4393281650582297469" rel="edit" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/4393281650582297469" rel="self" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/2011/12/outdegree-contractions-planar-graphs.html" rel="alternate" type="text/html"/><title>Outdegree, contractions, planar graphs</title><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">You can always direct the edges of a planar graph so that every vertex has outdegree at most 5. That fact is clear to anyone who has taken a discrete math course at one point in their life.<br/><br/>My question is:<br/>Q: What happens if the edges of the graph get contracted one by one? <br/>A: Then the outdegree risks growing. For example, if one contracts two adjacent vertices that each have outdegree 5, the resulting vertex will then have outdegree 5+5-1=9. The next contraction may bring its degree up to 9+5-1=13, then 17, etc. <br/><br/>My question then is:<br/>Q: Is it possible to efficiently modify the orientation of some edges along the way and prevent the outdegree from blowing up? <br/>A: Yup. Here's the algorithm, appealingly simple and natural. <b>After each contraction, do the following: while there exists a vertex v of outdegree greater than 10, reverse the orientation of every  outgoing  edge of v.</b> <br/><br/>At this point your question surely is or should be:<br/>Q (Toto): Cute, maybe, if that's your taste, but why do you care?<br/>A: Because it is used in an upcoming SODA paper by David Eisenstat, Philip Klein and myself, to reduce the runtime of a primal-dual region-growing phase. <br/><br/>Now that the motivation is out of the way, we can think about it together.<br/>Q (Toto): Ok, I'm willing to temporarily accept that this might be interesting. Then, why does this algorithm work and how efficient is it? <br/>A: By design, it obviously maintains an orientation in which each vertex has outdegree no more than 10. The neat observation is that it is an efficient algorithm: the total number of reversals, and hence the runtime (assuming you don't mess up the low-level implementation details), is O(n log n).<br/><br/>Q (Toto): Why is the total number of reversals O(n log n)? I don't see it.<br/>A: The proof is magic. <br/>Q (Toto): I don't like magic.<br/>A: The magic would disappear if you did a few examples of amortized analysis, but for a single analysis of a single problem, you have to accept the magic. Let G(i) be the graph after i contractions. We consider two orientations of the edges of G(i): Alg(G(i)), the orientation obtained by executing the algorithm, and a certain orientation Ideal(G(i)) such that the maximum outdegree in Ideal(G(i)) is at most 5. To start the proof, magically define the potential of G(i) to be<br/><center><b>Potential(G(i))= distance(Alg(G(i),Ideal(G(i))),</b></center> that is, the number of edges that are oriented differently in the two orientations. <br/><br/>Now, here's my question.<br/>Q: What happens to the potential when the algorithm reverses all the outgoing edges of a vertex v?<br/>A: That's not hard to see. Let S denote that group of edges.  Immediately before the reversal of S, in Alg the outdegree of v is |S|&gt;=11, and in Ideal the outdegree is &lt;=5, so S contributes at least |S|-5 to the distance; immediately after the reversal of S, S contributes at most 5 to the distance. So the reversal of S has caused the distance to decrease by at least (|S|-5-5)&gt;=1. Overall the total number of edge reversals is within a constant factor of (sum of decreases in the potential function): <b>instead of analyzing the number of edge reversals, we can just analyze the number of decreases of the potential function</b>. <br/><br/>Q (Toto): Big deal. It's not clear to me that you have made any progress: how do you analyze the number of decreases of the potential function?<br/>A: Let's see. Since the potential function is always non-negative, each decrease must be compensated by some previous increase (or by the initial value). So, the total number of decreases is at most the initial value of the potential (which is O(n)), plus the increases that may happen when going from Ideal(G(i)) to Ideal(G(i+1)).<br/><br/>Q (Toto): But you haven't even told me what that &quot;certain orientation Ideal(G(i))&quot; was! I am frustrated.<br/>A: Patience! It is now time to define Ideal(G(i)). Let's do it in backwards order.<br/>Q (Toto): Why? I am frustrated.<br/>A: Because that's what works. Be quiet! Start from the final graph, give it an orientation such that the maximum outdegree is 5, and &quot;uncontract&quot; the edges one by one. To define Ideal(G(i)) from Ideal(G(i+1)), do the following. After the uncontraction of edge uv, in the orientation of G(i) that is inherited from G(i+1), vertex u and vertex v each have outdegree at most 5, and edge uv needs to be given an orientation: arbitrarily direct it from u to v; if u now has degree 6, find a shortest path p (in the directed graph) from u to a vertex with outdegree less than or equal to 4, and reverse the orientation of every edge on p. Now the outdegree of u is reduced to 5. That defines Ideal(G(i)).<br/><br/>Q (Toto): I'm tired. Are we there yet?<br/>A: To finish the proof, it only remains to observe that p has length O(log n). <br/><br/>Q (Toto): Why does p have length O(log n)? Oh, whatever.<br/>A: Easy. Do breadth first search from u. How can it be that all vertices in the first i levels have degree &gt;=5? From Euler's formula for planar graphs, it is easy to see (it's an exercise) that it can only happen if the growth rate is exponential, and such a growth rate can only be maintained for O(log n) levels. <br/><br/>Q (Toto): If you say so. Whatever.<br/>A: Hang on! We're done, just about: So p has length O(log n), so Ideal(G(i)) differs from Ideal(G(i+1)) in O(log n) edges, so the potential can only increase by O(log n) at each contraction, so it can only increase by O(n log n) overall, so it can only decrease by O(initial value + n log n), so the total number of edges reversals is O(n + n log n)=O(n log n) overall, so the algorithm is efficient. I'm done. <br/><br/>My last question:<br/>Q: Isn't it elegant, simple, and clever? <br/>A (Toto): I guess so. You certainly seem excited about it.<br/><br/>Your final question is:<br/>Q (Toto): How do you know all that stuff? <br/>A: The basic technique is from Brodal and Fagerberg, &quot;Dynamic Representations of Sparse Graphs.&quot; The application to contractions is from Kowalik, &quot;Fast 3-coloring triangle-free planar graphs&quot;. It's also explained in an upcoming <a href="http://flatworlds.org/book/">textbook</a> by Philip Klein.</div><div class="commentbar"><p/><span class="commentbutton" href="http://teachingintrotocs.blogspot.com/feeds/4393281650582297469/comments/default"/><a href="http://teachingintrotocs.blogspot.com/feeds/4393281650582297469/comments/default"><img class="commenticon" src="/images/feed-icon.png"/> Subscribe to comments</a><![CDATA[  | ]]><a href="http://teachingintrotocs.blogspot.com/2011/12/outdegree-contractions-planar-graphs.html#comment-form"><img class="commenticon" src="/images/post-icon.png"/> Post a comment</a></div></content><updated planet:format="December 11, 2011 12:13 PM">2011-12-11T12:13:00Z</updated><published planet:format="December 11, 2011 12:13 PM">2011-12-11T12:13:00Z</published><category scheme="http://www.blogger.com/atom/ns#" term="TCS"/><author><name>Claire Mathieu</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/10957755706440077623</uri></author><source><id>tag:blogger.com,1999:blog-4068183698747623113</id><category term="TCS"/><category term="Oops"/><category term="technology"/><author><name>Claire Mathieu</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/10957755706440077623</uri></author><link href="http://teachingintrotocs.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="http://www.blogger.com/feeds/4068183698747623113/posts/default/-/TCS" rel="self" type="application/atom+xml"/><link href="http://teachingintrotocs.blogspot.com/search/label/TCS" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/><title>A CS Professor's blog</title><updated planet:format="August 31, 2018 11:03 AM">2018-08-31T11:03:02Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;8089cd57e1113cac488458ecc6b57d2f5d63c2f2cb0051d1de6e12d23ed12d82&quot;</planet:http_etag><planet:http_last_modified>Fri, 31 Aug 2018 11:03:02 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>claire-mathieu</planet:css-id><planet:face>mathieu.jpeg</planet:face><planet:name>Claire Mathieu</planet:name><planet:filters>category.py?cats=tcs</planet:filters><planet:http_status>200</planet:http_status></source></entry>

