<?xml version="1.0" encoding="utf-8"?><entry xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>http://xrds.acm.org/blog/?p=1215</id><link href="https://blog.xrds.acm.org/2014/04/software-packages-for-theoreticians-by-theoreticians/" rel="alternate" type="text/html"/><title>Software Packages for Theoreticians by Theoreticians</title><summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Brown University’s ICERM recently hosted a workshop titled “Electrical Flows, Graph Laplacians, and Algorithms,” where top researchers convened to present and discuss their recent progress in spectral graph theory and algorithms. Richard Peng opened up the workshop with an overview talk … <a href="https://blog.xrds.acm.org/2014/04/software-packages-for-theoreticians-by-theoreticians/">Continue reading <span class="meta-nav">→</span></a></p>
<p>The post <a href="https://blog.xrds.acm.org/2014/04/software-packages-for-theoreticians-by-theoreticians/" rel="nofollow">Software Packages for Theoreticians by Theoreticians</a> appeared first on <a href="https://blog.xrds.acm.org" rel="nofollow">XRDS</a>.</p></div><div class="commentbar"><p/></div></summary><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Brown University’s<a href="http://icerm.brown.edu/home/index.php" title="ICERM"> ICERM</a> recently hosted a workshop titled <a href="http://icerm.brown.edu/sp-s14-w3/">“Electrical Flows, Graph Laplacians, and Algorithms,”</a> where top researchers convened to present and discuss their recent progress in spectral graph theory and algorithms. <a href="http://math.mit.edu/~rpeng/">Richard Peng</a> opened up the workshop with an overview talk on efficient solvers for linear systems with graph Laplacians as the coefficient matrix. He presented a thorough history of the topic and set the stage for the variety of technical talks on fast algorithms for graph sparsification, spectral clustering, computing max flow, as well as a variety of other local and approximation algorithms.</p>
<p>His talk (as well as many of the rest) are archived and <a href="http://icerm.brown.edu/video_archive/">available</a> thanks to ICERM. I will focus on one highlight – a point that resonated with the conclusion of Richard Peng’s talk – a call for more software implementing these new, fast algorithms. In this light, I’d like to briefly discuss some of the software packages out there for spectral graph theory and the analysis of large graphs being developed by theoreticians active in the area.<span id="more-1215"/></p>
<h2>Trilinos</h2>
<p><a href="http://www.trilinos.org">Trilinos</a> is a project out of Sandia National Labs for developing robust parallel algorithms and implementing them with general purpose software. The focus of the project is enabling technologies for large-scale scientific problems as to encourage further research in the field of parallel, robust, large-scale algorithms. In recognition of existing software for numerical computation, the developers at Trilinos make use of established packages such as <a href="http://www.netlib.org/lapack/">LAPACK</a> (for solving systems of simultaneous linear equations), and provides interfaces for <a href="http://www.cs.sandia.gov/CRF/aztec1.html">Aztec</a> (a parallel solver for sparse linear systems), <a href="http://crd-legacy.lbl.gov/~xiaoye/SuperLU/">SuperLU</a> (high performance LU factorization for solving linear systems), Mumps, and Umfpack among others. Currently, Trilinos provides robust parallel numerical algorithms for automatic differentiation, partitioning, preconditioning, and solving linear and nonlinear systems to name a few. The beauty of having a team of algorithmists behind the project is the emphasis on enabling further algorithmic research by building tools for developing tools.</p>
<h2>Zoltan</h2>
<p><a href="http://www.sandia.gov/~egboman/">Erik Boman</a> has contributed important work in the area of the preconditioners for linear systems and the support theory for preconditioners. <a href="http://www.cs.sandia.gov/Zoltan/Zoltan.html">Zoltan</a>, one of his projects, is a toolkit also from Sandia National Labs comprised of combinatorial algorithms for parallel or unstructured applications. It uses dynamic load balancing and partitioning algorithms for parallelizing the computation of applications whose work loads change over the course of the computation. To deal with the problem of <i>dynamic </i>partitioning, a suite of partitioning algorithms is included in the Zoltan toolkit. In particular, it makes use of geometric algorithms (group together objects that are physically close), graph algorithms (minimize a cut dividing groups of objects), and hypergraph algorithms (minimize communication costs between groups of objects) for load balancing partitioning. Another important function Zoltan provides is for graph coloring and graph ordering, which in turn can be used for parallel preconditioners and linear solvers.</p>
<h2>Sangria</h2>
<p><a href="http://www.cs.cmu.edu/~sangria/sangria.html">Sangria</a> is another project focused on developing and implementing parallel geometric and numerical algorithms. Housed at Carnegie Mellon, the software uses parallel algorithms for simulating complex flows with dynamic interfaces that achieves good accuracy.</p>
<h2>MatlabBGL</h2>
<p><a href="https://www.cs.purdue.edu/homes/dgleich/packages/matlab_bgl/">MatlabBGL</a> is a Matlab package written by <a href="https://www.cs.purdue.edu/homes/dgleich/">David Gleich</a>, designed to work with sparse graphs on hundreds of thousands of nodes. The library includes common graph algorithms such as computing shortest paths (Dijkstra, Bellman-Ford, Floyd-Warshall), finding an minimum spanning tree (Kruskal, Prim), depth-first search, breadth-first search, and max flow – all optimized for efficiency on large graphs. One of the most useful features of MatlabBGL is the visitor feature for monitoring an algorithm, implemented from the <a href="http://www.boost.org/doc/libs/1_55_0/libs/graph/doc/">Boost Graph Library</a>. Visitors output all the steps taken by the algorithm, and dissecting the output is useful for optimization. A nice illustration of this feature with Dijkstra’s algorithm in the documentation tells us how a graph is explored, vertex by vertex.</p>
<h2>SVR Meshing</h2>
<p><a href="http://www.cs.cmu.edu/~bhudson/">Beno<span style="font-family: Ubuntu, 'Times New Roman';">î</span>t Hudson’s</a> PhD work was on sparse mesh refinement, and <a href="http://sparse-meshing.com/svr/0.2.1/">SVR</a> (for Sparse Voronoi Refinement) is the implementation of his algorithm for Delaunay refinement. SVR is a provably fast algorithm for producing small meshes, which is useful for when remeshing occurs during simulation due to domain change or refinement.</p>
<h2>CMG + SpA</h2>
<p><a href="http://www.cs.cmu.edu/~jkoutis/SpectralAlgorithms.htm">SpA</a> is a Matlab program for computing the effective resistances in an electrical network and is an implementation of the <a href="http://arxiv.org/abs/0803.0929">Spielman-Srivastrava</a>. As this requires solving linear systems, it uses <a href="http://www.cs.cmu.edu/~jkoutis/cmg.html">Combinatorial Multigrid (CMG)</a>, a Matlab-based solver for linear systems in symmetric diagonally-dominant matrices written by <a href="http://www.cs.cmu.edu/~jkoutis/">Yiannis Koutis</a>.</p>
<p>This is by no means a comprehensive list, I encourage you include more useful software in the comments.</p>
<p><a href="https://www.flickr.com/photos/ezu/" title="here"> </a></p>
<p>The post <a href="https://blog.xrds.acm.org/2014/04/software-packages-for-theoreticians-by-theoreticians/" rel="nofollow">Software Packages for Theoreticians by Theoreticians</a> appeared first on <a href="https://blog.xrds.acm.org" rel="nofollow">XRDS</a>.</p></div></content><updated planet:format="April 28, 2014 04:11 AM">2014-04-28T04:11:31Z</updated><published planet:format="April 28, 2014 04:11 AM">2014-04-28T04:11:31Z</published><category term="Theory"/><author><name>Olivia</name></author><source><id>https://blog.xrds.acm.org</id><link href="https://blog.xrds.acm.org/tag/theory/feed/" rel="self" type="application/atom+xml"/><link href="https://blog.xrds.acm.org" rel="alternate" type="text/html"/><subtitle>Crossroads - The ACM Magazine for Students</subtitle><title>Theory – XRDS</title><updated planet:format="December 16, 2018 04:43 PM">2018-12-16T16:43:40Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>&quot;ce816ac0eb47d36445e6791dee738bc7&quot;</planet:http_etag><planet:http_last_modified>Fri, 09 Nov 2018 09:28:27 GMT</planet:http_last_modified><planet:bozo>true</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>acm-crossroads-student-magazine</planet:css-id><planet:face>xrds.jpeg</planet:face><planet:name>ACM Crossroads student magazine</planet:name><planet:http_location>https://blog.xrds.acm.org/tag/theory/feed/</planet:http_location><planet:http_status>301</planet:http_status></source></entry>
