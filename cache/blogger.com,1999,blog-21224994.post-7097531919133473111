<?xml version="1.0" ?><entry xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/"><id>tag:blogger.com,1999:blog-21224994.post-7097531919133473111</id><link href="https://research.googleblog.com/feeds/7097531919133473111/comments/default" rel="replies" type="application/atom+xml"/><link href="https://research.googleblog.com/2016/09/the-280-year-old-algorithm-inside.html#comment-form" rel="replies" type="text/html"/><link href="https://www.blogger.com/feeds/21224994/posts/default/7097531919133473111" rel="edit" type="application/atom+xml"/><link href="https://www.blogger.com/feeds/21224994/posts/default/7097531919133473111" rel="self" type="application/atom+xml"/><link href="https://research.googleblog.com/2016/09/the-280-year-old-algorithm-inside.html" rel="alternate" type="text/html"/><title>The 280-Year-Old Algorithm Inside Google Trips</title><content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><span class="byline-author">Posted by Bogdan Arsintescu, Software Engineer &amp; Sreenivas Gollapudi, Kostas Kollias, Tamas Sarlos and Andrew Tomkins, Research Scientists<br/></span><br/><br/><a href="https://en.wikipedia.org/wiki/Algorithm_engineering">Algorithms Engineering</a> is a lot of fun because algorithms do not go out of fashion: one never knows when an oldie-but-goodie might come in handy.  Case in point: Yesterday, Google <a href="https://googleblog.blogspot.com/2016/09/see-more-plan-less-try-google-trips.html">announced Google Trips</a>, a new app to assist you in your travels  by helping you create your own “perfect day” in a city.  Surprisingly, deep inside Google Trips, there is an algorithm that was invented 280 years ago. <br/><br/>In 1736, <a href="https://en.wikipedia.org/wiki/Leonhard_Euler">Leonhard Euler</a> authored a brief but <a href="http://eulerarchive.maa.org//docs/originals/E053.pdf">beautiful mathematical paper</a> regarding the town of Königsberg and its 7 bridges, shown here:<br/><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="https://4.bp.blogspot.com/-HRkkgmmGB3Y/V-Fk43DGYkI/AAAAAAAABNw/j5c6gQMUsjAWtMWwMBnQ-D35sA8l0-McQCLcB/s1600/image05.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="504" src="https://4.bp.blogspot.com/-HRkkgmmGB3Y/V-Fk43DGYkI/AAAAAAAABNw/j5c6gQMUsjAWtMWwMBnQ-D35sA8l0-McQCLcB/s640/image05.png" width="640"/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Image from <a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg">Wikipedia</a></td></tr></tbody></table>In the paper, Euler studied the following question: is it possible to walk through the city crossing each bridge exactly once? As it turns out, for the city of Königsberg, the answer is no. To reach this answer, Euler developed a general approach to represent any layout of landmasses and bridges in terms of what he dubbed the <i>Geometriam Situs</i> (the “Geometry of Place”), which we now call <a href="https://en.wikipedia.org/wiki/Graph_theory">Graph Theory</a>.  He represented each landmass as a “node” in the graph, and each bridge as an “edge,” like this:<br/><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="https://1.bp.blogspot.com/-wRl8WjuCA-c/V-FkPmiZK-I/AAAAAAAABNs/Z9htxAzYeyg_C44uNKdjCYVLoQqaaQHuwCLcB/s1600/Screen%2BShot%2B2016-09-20%2Bat%2B9.26.46%2BAM.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="146" src="https://1.bp.blogspot.com/-wRl8WjuCA-c/V-FkPmiZK-I/AAAAAAAABNs/Z9htxAzYeyg_C44uNKdjCYVLoQqaaQHuwCLcB/s640/Screen%2BShot%2B2016-09-20%2Bat%2B9.26.46%2BAM.png" width="640"/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Image from <a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg">Wikipedia</a></td></tr></tbody></table>Euler noticed that if all the nodes in the graph have an even number of edges (such graphs are called “Eulerian” in his honor) then, and only then, a cycle can be found that visits every edge exactly once.  Keep this in mind, as we’ll rely on this fact later in the post.<br/><br/>Our team in Google Research has been fascinated by the “Geometry of Place” for some time, and we started investigating a question related to Euler’s:  rather than visiting just the bridges, how can we visit as many interesting places as possible during a particular trip?  We call this the “itineraries” problem.  Euler didn’t study it, but it is a well known topic in Optimization, where it is often called the “<a href="http://chekuri.cs.illinois.edu/papers/orienteering-journal.pdf">Orienteering</a>” problem.<br/><br/>While Euler’s problem has an efficient and exact solution, the itineraries problem is not just hard to solve, it is hard to even <i>approximately</i> solve!  The difficulty lies in the interplay between two conflicting goals:  first, we should pick great places to visit, but second, we should pick them to allow a good itinerary:  not too much travel time; don’t visit places when they’re closed; don’t visit too many museums, etc.  Embedded in such problems is the challenge of finding efficient routes, often referred to as the <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">Travelling Salesman Problem</a> (TSP).<br/><br/><b>Algorithms for Travel Itineraries</b><br/><br/>Fortunately, the real world has a property called the “<a href="https://en.wikipedia.org/wiki/Triangle_inequality">triangle inequality</a>” that says adding an extra stop to a route never makes it shorter.  When the underlying geometry satisfies the triangle inequality, the TSP can be approximately solved using another <a href="https://en.wikipedia.org/wiki/Christofides_algorithm">algorithm discovered by Christofides</a> in 1976.  This is an important part of our solution, and builds on Euler’s paper, so we’ll give a quick four-step rundown of how it works here:<br/><ol><li>We start with all our destinations separate, and repeatedly connect together the closest two that aren’t yet connected.  This doesn’t yet give us an itinerary, but it does connect all the destinations via a <a href="https://en.wikipedia.org/wiki/Minimum_spanning_tree">minimum spanning tree</a> of the graph.</li><li>We take all the destinations that have an odd number of connections in this tree (Euler proved there must be an even number of these), and carefully pair them up.</li><li>Because all the destinations now have an even number of edges, we’ve created an Eulerian graph, so we create a route that crosses each edge exactly once.</li><li>We now have a great route, but it might visit some places more than once.  No problem, we find any double visits and simply bypass them, going directly from the predecessor to the successor.</li></ol>Christofides gave an elegant proof that the resulting route is always close to the shortest possible.  Here’s an example of the Christofides’ algorithm in action on a location graph with the nodes representing places and the edges with costs representing the travel time between the places.<br/><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="https://3.bp.blogspot.com/-DYlLoNxg-S8/V-FlOHLF8TI/AAAAAAAABN0/kNISdLQvX6cfWAmjT8k-LKPEMJA63nX-ACLcB/s1600/image04.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="172" src="https://3.bp.blogspot.com/-DYlLoNxg-S8/V-FlOHLF8TI/AAAAAAAABN0/kNISdLQvX6cfWAmjT8k-LKPEMJA63nX-ACLcB/s640/image04.png" width="640"/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Construction of an Eulerian Tour in a location graph</td></tr></tbody></table>Armed with this efficient route-finding subroutine, we can now start building itineraries one step at a time.  At each step, we estimate the benefit to the user of each possible new place to visit, and likewise estimate the cost using the Christofides algorithm.  A user’s benefit can be derived from a host of natural factors such as the popularity of the place and how different the place is relative to places already visited on the tour. We then pick whichever new place has the best benefit per unit of extra cost (e.g., time needed to include the new place in the tour).  Here’s an example of our algorithm actually building a route in London using the location graph shown above:<br/><div class="separator" style="clear: both; text-align: center;"><a href="https://3.bp.blogspot.com/-y_t6IG5RMuE/V-Flb6RQktI/AAAAAAAABN4/91je5cQumFcOI5bgJIliDkk3tX3MoPoAgCLcB/s1600/image01.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="274" src="https://3.bp.blogspot.com/-y_t6IG5RMuE/V-Flb6RQktI/AAAAAAAABN4/91je5cQumFcOI5bgJIliDkk3tX3MoPoAgCLcB/s640/image01.png" width="640"/></a></div><b>Itineraries in Google Trips</b><br/><br/>With our first good approximate solution to the itineraries problem in hand, we started working with our colleagues from the Google Trips team, and we realized we’d barely scratched the surface. For instance, even if we produce the absolute perfect itinerary, any particular user of the system will very reasonably say, “That’s great, but all my friends say I also need to visit this other place.  Plus, I’m only around for the morning, and I don’t want to miss this place you listed in the afternoon. And I’ve already seen Big Ben twice.”  So rather than just producing an itinerary once and calling it a perfect day, we needed a fast dynamic algorithm for itineraries that users can modify on the fly to suit their individual taste.  And because many people have bad data connections while traveling, the solution had to be efficient enough to run disconnected on a phone.<br/><br/><b>Better Itineraries Through the Wisdom of Crowds</b><br/><br/>While the algorithmic aspects of the problem were highly challenging, we realized that producing high-quality itineraries was just as dependent on our understanding of the many possible stopping points on the itinerary.  We had Google’s extensive travel database to identify the interesting places to visit, and we also had great data from Google’s existing systems about how to travel from any place to any other.  But we didn’t have a good sense for how people typically move through this geometry of places.  <br/><br/>For this, we turned to the wisdom of crowds.  This type of wisdom is used by Google to <a href="https://googleblog.blogspot.com/2007/02/stuck-in-traffic.html">estimate delays on highways</a>, and to discover <a href="https://support.google.com/business/answer/6263531?hl=en">when restaurants are most busy</a>.  Here, we use the same techniques to learn about common visit sequences that we can stitch together into itineraries that feel good to our users. We combine Google's knowledge of <a href="https://techcrunch.com/2015/07/28/google-search-now-shows-you-when-local-businesses-are-busiest/">when places are popular</a>, with the directions between those places to gather an idea of what tourists like to do when travelling.<br/><br/>And the crowd has a lot more wisdom to offer in the future.  For example, we noticed that visits to Buckingham Palace spike around 11:30 and stay a bit longer than at other times of the day.  This seemed a little strange to us, but when we looked more closely, it turns out to be the time of the <a href="https://www.royalcollection.org.uk/visit/buckinghampalace/what-to-see-and-do/changing-the-guard">Changing of the Guard</a>.  We’re looking now at ways to incorporate this type of timing information into the itinerary selection algorithms.<br/><br/>So give it a try:  Google Trips, available now on <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.travel.onthego">Android</a> and <a href="https://itunes.apple.com/app/id1081561570?mt=8">iOS</a>, has you covered from departure to return.</div></content><updated planet:format="September 20, 2016 05:00 PM">2016-09-20T17:00:00Z</updated><published planet:format="September 20, 2016 05:00 PM">2016-09-20T17:00:00Z</published><category scheme="http://www.blogger.com/atom/ns#" term="Algorithms"/><category scheme="http://www.blogger.com/atom/ns#" term="Google Trips"/><category scheme="http://www.blogger.com/atom/ns#" term="Graph"/><category scheme="http://www.blogger.com/atom/ns#" term="Research"/><author><name>Google AI</name><email>noreply@blogger.com</email><uri>http://www.blogger.com/profile/12098626514775266161</uri></author><source><id>tag:blogger.com,1999:blog-21224994</id><category term="Machine Learning"/><category term="Google Brain"/><category term="Deep Learning"/><category term="Education"/><category term="University Relations"/><category term="TensorFlow"/><category term="Publications"/><category term="open source"/><category term="Computer Vision"/><category term="Research"/><category term="Natural Language Processing"/><category term="conference"/><category term="Neural Networks"/><category term="conferences"/><category term="Natural Language Understanding"/><category term="Research Awards"/><category term="MOOC"/><category term="Computer Science"/><category term="Machine Perception"/><category term="datasets"/><category term="Machine Intelligence"/><category term="YouTube"/><category term="Awards"/><category term="Algorithms"/><category term="Android"/><category term="Computational Photography"/><category term="Health"/><category term="Quantum Computing"/><category term="Speech"/><category term="Visualization"/><category term="ACM"/><category term="CVPR"/><category term="K-12"/><category term="Structured Data"/><category term="Earth Engine"/><category term="Machine Translation"/><category term="Security and Privacy"/><category term="Voice Search"/><category term="ph.d. fellowship"/><category term="Google Accelerated Science"/><category term="HCI"/><category term="Image Processing"/><category term="Search"/><category term="grants"/><category term="AI"/><category term="Collaboration"/><category term="Faculty Summit"/><category term="Graph Mining"/><category term="NIPS"/><category term="TTS"/><category term="Vision Research"/><category term="market algorithms"/><category term="statistics"/><category term="Course Builder"/><category term="Google Cloud Platform"/><category term="Google Genomics"/><category term="Google+"/><category term="Robotics"/><category term="Speech Recognition"/><category term="Translate"/><category term="UI"/><category term="User Experience"/><category term="WWW"/><category term="optimization"/><category term="ACL"/><category term="Fusion Tables"/><category term="Google Books"/><category term="Google Maps"/><category term="ICML"/><category term="Information Retrieval"/><category term="Moore's Law"/><category term="Ngram"/><category term="On-device Learning"/><category term="Physics"/><category term="data science"/><category term="renewable energy"/><category term="App Engine"/><category term="Art"/><category term="Chemistry"/><category term="Computational Imaging"/><category term="Diversity"/><category term="Europe"/><category term="Expander"/><category term="Gmail"/><category term="Google Play Apps"/><category term="Google Translate"/><category term="Hardware"/><category term="ICLR"/><category term="Image Classification"/><category term="Internet of Things"/><category term="Machine Hearing"/><category term="NLP"/><category term="Networks"/><category term="PhD Fellowship"/><category term="Pixel"/><category term="Semi-supervised Learning"/><category term="Software"/><category term="Virtual Reality"/><category term="accessibility"/><category term="crowd-sourcing"/><category term="distributed systems"/><category term="economics"/><category term="internationalization"/><category term="publication"/><category term="search ads"/><category term="wikipedia"/><category term="API"/><category term="Acoustic Modeling"/><category term="App Inventor"/><category term="Audio"/><category term="Automatic Speech Recognition"/><category term="China"/><category term="Cloud Computing"/><category term="Data Discovery"/><category term="DeepDream"/><category term="DeepMind"/><category term="EMEA"/><category term="Environment"/><category term="Exacycle"/><category term="Google Drive"/><category term="Google Science Fair"/><category term="Graph"/><category term="Inbox"/><category term="KDD"/><category term="Labs"/><category term="MapReduce"/><category term="Optical Character Recognition"/><category term="Policy"/><category term="Quantum AI"/><category term="Social Networks"/><category term="Supervised Learning"/><category term="Systems"/><category term="VLDB"/><category term="Video Analysis"/><category term="ads"/><category term="schema.org"/><category term="trends"/><category term="video"/><category term="Adaptive Data Analysis"/><category term="Africa"/><category term="Android Wear"/><category term="April Fools"/><category term="Augmented Reality"/><category term="Australia"/><category term="Cantonese"/><category term="Chrome"/><category term="Conservation"/><category term="Data Center"/><category term="EMNLP"/><category term="Electronic Commerce and Algorithms"/><category term="Encryption"/><category term="Entity Salience"/><category term="Faculty Institute"/><category term="Flu Trends"/><category term="Gboard"/><category term="Google Docs"/><category term="Google Photos"/><category term="Google Sheets"/><category term="Google Trips"/><category term="Google Voice Search"/><category term="Government"/><category term="High Dynamic Range Imaging"/><category term="ICSE"/><category term="IPython"/><category term="Image Annotation"/><category term="India"/><category term="Interspeech"/><category term="Journalism"/><category term="Keyboard Input"/><category term="Klingon"/><category term="Korean"/><category term="Linear Optimization"/><category term="Low-Light Photography"/><category term="ML"/><category term="Magenta"/><category term="Market Research"/><category term="Mixed Reality"/><category term="Multimodal Learning"/><category term="NAACL"/><category term="Network Management"/><category term="Nexus"/><category term="Peer Review"/><category term="PhotoScan"/><category term="PiLab"/><category term="Professional Development"/><category term="Proposals"/><category term="Public Data Explorer"/><category term="SIGCOMM"/><category term="SIGMOD"/><category term="Semantic Models"/><category term="Site Reliability Engineering"/><category term="Style Transfer"/><category term="TPU"/><category term="TV"/><category term="TensorBoard"/><category term="UNIX"/><category term="Visiting Faculty"/><category term="Wiki"/><category term="adsense"/><category term="adwords"/><category term="correlate"/><category term="electronics"/><category term="entities"/><category term="gamification"/><category term="jsm"/><category term="jsm2011"/><category term="localization"/><category term="operating systems"/><category term="osdi"/><category term="osdi10"/><category term="patents"/><category term="resource optimization"/><author><name>Unknown</name><email>noreply@blogger.com</email></author><link href="https://research.googleblog.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/><link href="https://www.blogger.com/feeds/21224994/posts/default/-/Algorithms" rel="self" type="application/atom+xml"/><link href="https://research.googleblog.com/search/label/Algorithms" rel="alternate" type="text/html"/><link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/><subtitle>The latest news from Research at Google</subtitle><title>Research Blog</title><updated planet:format="February 27, 2020 09:34 AM">2020-02-27T09:34:03Z</updated><planet:module>toc</planet:module><planet:format>atom10</planet:format><planet:http_etag>W/&quot;74bab70ddc23c603e713bf1869833c16d83475e8e02b320d22cc231ad4d1a831&quot;</planet:http_etag><planet:http_last_modified>Thu, 27 Feb 2020 09:34:03 GMT</planet:http_last_modified><planet:bozo>false</planet:bozo><planet:items_per_page>40</planet:items_per_page><planet:css-id>google-research-blog-algorithms</planet:css-id><planet:face>google.png</planet:face><planet:name>Google Research Blog: Algorithms</planet:name><planet:http_status>200</planet:http_status></source></entry>